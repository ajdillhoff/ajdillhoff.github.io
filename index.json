[{"authors":["admin"],"categories":null,"content":"I love building things and helping others build things they are passionate about. I also love distilling complex topics, clearing the path towards knowledge.\n","date":1689570000,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1689570000,"objectID":"05ebe7d8c837c5d6c5fe1186ef4f04cb","permalink":"https://ajdillhoff.github.io/authors/alex-dillhoff/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/alex-dillhoff/","section":"authors","summary":"I love building things and helping others build things they are passionate about. I also love distilling complex topics, clearing the path towards knowledge.","tags":null,"title":"Alex Dillhoff","type":"authors"},{"authors":["admin"],"categories":null,"content":"Nelson Bighetti is a professor of artificial intelligence at the Stanford AI Lab. His research interests include distributed robotics, mobile computing and programmable matter. He leads the Robotic Neurobiology group, which develops self-reconfiguring robots, systems of self-organizing robots, and mobile sensor networks.\nIt is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum. The point of using Lorem Ipsum. distracted by the readable content of a page.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://ajdillhoff.github.io/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"Nelson Bighetti is a professor of artificial intelligence at the Stanford AI Lab. His research interests include distributed robotics, mobile computing and programmable matter. He leads the Robotic Neurobiology group, which develops self-reconfiguring robots, systems of self-organizing robots, and mobile sensor networks.\nIt is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum.","tags":null,"title":"Alex Dillhoff","type":"authors"},{"authors":null,"categories":null,"content":"This is the course page for CSE1310 - Introduction to Computers \u0026amp; Programming in Summer 2023. Here you\u0026rsquo;ll find slides and other helpful resources. All assignments and announcements will be posted on Canvas.\nTeaching Assistants Sachit Satyal (sxs3757 (at) mavs (dot) uta (dot) edu) Office Hours MoWeFri 2PM - 3PM and TuTh 4:30PM - 5:30PM via Teams (or by appointment).\n","date":1689552000,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1689552000,"objectID":"ca3d2589b58f8c12d98f55a7b636f491","permalink":"https://ajdillhoff.github.io/courses/cse1310/","publishdate":"2023-07-17T00:00:00Z","relpermalink":"/courses/cse1310/","section":"courses","summary":"Introductory programming course using C.","tags":null,"title":"CSE 1310 - Introduction to Computers \u0026 Programming","type":"docs"},{"authors":null,"categories":null,"content":"This is the course page for CSE 6363 - Machine Learning in Summer 2023. Here you\u0026rsquo;ll find class notes and other helpful resources. All assignments and announcements will be posted on Canvas.\nTeaching Assistants Yanjun Lyu (yxl9168 (at) mavs (dot) uta (dot) edu) Xiao Shi (xiao (dot) shi (at) mavs (dot) uta (dot) edu) Office Hours All office hours are conducted via Teams by default. Please contact me for an appointment if you wish to meet in person.\nMoWeFri 2PM - 3PM TuTh 4:30PM - 5:30PM ","date":1689724800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1689724800,"objectID":"8d9b4ecfa5ebcb8f21c39196f962b138","permalink":"https://ajdillhoff.github.io/courses/cse6363/","publishdate":"2023-07-19T00:00:00Z","relpermalink":"/courses/cse6363/","section":"courses","summary":"Graduate-level machine learning topics covering the foundations up to modern publications.","tags":null,"title":"CSE 6363 - Machine Learning","type":"docs"},{"authors":null,"categories":null,"content":"This schedule is tentative and may change.\nDate Topic Materials June 5 Course Introduction, Supervised Learning Linear Regression June 7 Supervised Learning, Python Review Logistic Regression June 12 Probability Theory, Linear Discriminant Analysis Probability Theory, LDA June 14 Naive Bayes, Overfitting \u0026amp; Regularization in Linear Models, Kernels Naive Bayes, Regularization, Kernels June 19 Juneteenth Holiday June 21 Support Vector Machines Support Vector Machines June 26 Support Vector Machines, Sequential Minimal Optimization SVM, SMO June 28 Neural Networks Neural Networks July 3 US Independence Day Extra July 5 Introduction to PyTorch, Bias-Variance Tradeoff, Model Selection, Regularization Bias and Variance July 10 Hidden Markov Models Hidden Markov Models July 12 Decision Trees Decision Trees July 17 HMM Example, DT Example, Boosting Boosting July 19 Gradient Boosting, Principal Component Analysis Gradient Boosting, Principal Component Analysis ","date":1689721200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1689721200,"objectID":"2a3448e80b3ddf3d6fc98a1c6bc12913","permalink":"https://ajdillhoff.github.io/courses/cse6363/schedule/","publishdate":"2023-07-19T00:00:00+01:00","relpermalink":"/courses/cse6363/schedule/","section":"courses","summary":"This schedule is tentative and may change.\nDate Topic Materials June 5 Course Introduction, Supervised Learning Linear Regression June 7 Supervised Learning, Python Review Logistic Regression June 12 Probability Theory, Linear Discriminant Analysis Probability Theory, LDA June 14 Naive Bayes, Overfitting \u0026amp; Regularization in Linear Models, Kernels Naive Bayes, Regularization, Kernels June 19 Juneteenth Holiday June 21 Support Vector Machines Support Vector Machines June 26 Support Vector Machines, Sequential Minimal Optimization SVM, SMO June 28 Neural Networks Neural Networks July 3 US Independence Day Extra July 5 Introduction to PyTorch, Bias-Variance Tradeoff, Model Selection, Regularization Bias and Variance July 10 Hidden Markov Models Hidden Markov Models July 12 Decision Trees Decision Trees July 17 HMM Example, DT Example, Boosting Boosting July 19 Gradient Boosting, Principal Component Analysis Gradient Boosting, Principal Component Analysis ","tags":null,"title":"Schedule","type":"docs"},{"authors":null,"categories":null,"content":"This schedule is tentative and may change.\nDate Topic Materials June 6 Course Introduction Introduction June 8 Introduction to C Introduction to C June 13 UNIX, Code Formatting, Input/Output Examples UNIX June 15 CANCELLED June 20 Control Structures Basic Control June 22 Loops, Data Types \u0026amp; Conversions Loops June 27 Arrays, Midterm Exam Review Arrays June 29 Midterm Exam July 4 US Independence Day Holiday July 6 Arrays Arrays July 11 Number Systems Number Systems July 13 Functions Functions July 18 Benchmark Review, Debugging July 20 Software Development Lifecycle SDLC ","date":1689548400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1689548400,"objectID":"7de37af4d9cf2e385b491cba140d8897","permalink":"https://ajdillhoff.github.io/courses/cse1310/schedule/","publishdate":"2023-07-17T00:00:00+01:00","relpermalink":"/courses/cse1310/schedule/","section":"courses","summary":"This schedule is tentative and may change.\nDate Topic Materials June 6 Course Introduction Introduction June 8 Introduction to C Introduction to C June 13 UNIX, Code Formatting, Input/Output Examples UNIX June 15 CANCELLED June 20 Control Structures Basic Control June 22 Loops, Data Types \u0026amp; Conversions Loops June 27 Arrays, Midterm Exam Review Arrays June 29 Midterm Exam July 4 US Independence Day Holiday July 6 Arrays Arrays July 11 Number Systems Number Systems July 13 Functions Functions July 18 Benchmark Review, Debugging July 20 Software Development Lifecycle SDLC ","tags":null,"title":"Schedule","type":"docs"},{"authors":null,"categories":null,"content":"Books Christopher M. Bishop, Pattern Recognition and Machine Learning, Springer, 2006. Trevor Hastie, Robert Tibshirani, and Jerome Friedman, The Elements of Statistical Learning: Data Mining, Inference, and Prediction, Springer, 2009. Gareth James, Daniela Witten, Trevor Hastie, and Robert Tibshirani, An Introduction to Statistical Learning, Springer, 2023. Kevin Murphy, Probabilistic Machine Learning: An Introduction, MIT Press, 2022. Resources Python Programming Language PyTorch Anaconda HuggingFace ","date":1689721200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1689721200,"objectID":"32a4e7f841ca201e054e6091dbff81c5","permalink":"https://ajdillhoff.github.io/courses/cse6363/materials/","publishdate":"2023-07-19T00:00:00+01:00","relpermalink":"/courses/cse6363/materials/","section":"courses","summary":"Books Christopher M. Bishop, Pattern Recognition and Machine Learning, Springer, 2006. Trevor Hastie, Robert Tibshirani, and Jerome Friedman, The Elements of Statistical Learning: Data Mining, Inference, and Prediction, Springer, 2009. Gareth James, Daniela Witten, Trevor Hastie, and Robert Tibshirani, An Introduction to Statistical Learning, Springer, 2023. Kevin Murphy, Probabilistic Machine Learning: An Introduction, MIT Press, 2022. Resources Python Programming Language PyTorch Anaconda HuggingFace ","tags":null,"title":"Course Materials","type":"docs"},{"authors":null,"categories":null,"content":"Books L. Foster and W. Foster, C By Discovery (4th ed.), Pearson, 2004. Stephen Prata, C Primer Plus, Pearson, 2013. Bjarne Stroustrup, The C++ Programming Language (4th ed.), Addison-Wesley, 2013. Resources Submitting Assignments using GitHub CSE 13xx SharePoint C/C++ Reference The Linux Command Line Git Cheat Sheet Using GCC with MinGW Using WSL with VS Code GDB Cheat Sheet Programming Practice C Etudes Project Euler C Exercises (W3 Schools) C++ Exercises (W3 Schools) edabit Challenges exercism - Coding Exercises ","date":1689548400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1689548400,"objectID":"a47a98ad4c6ee3bb6f707044d6fe3970","permalink":"https://ajdillhoff.github.io/courses/cse1310/materials/","publishdate":"2023-07-17T00:00:00+01:00","relpermalink":"/courses/cse1310/materials/","section":"courses","summary":"Books L. Foster and W. Foster, C By Discovery (4th ed.), Pearson, 2004. Stephen Prata, C Primer Plus, Pearson, 2013. Bjarne Stroustrup, The C++ Programming Language (4th ed.), Addison-Wesley, 2013. Resources Submitting Assignments using GitHub CSE 13xx SharePoint C/C++ Reference The Linux Command Line Git Cheat Sheet Using GCC with MinGW Using WSL with VS Code GDB Cheat Sheet Programming Practice C Etudes Project Euler C Exercises (W3 Schools) C++ Exercises (W3 Schools) edabit Challenges exercism - Coding Exercises ","tags":null,"title":"Course Materials","type":"docs"},{"authors":["Alex Dillhoff"],"categories":null,"content":"Notes from (Friedman 2001) Many machine learning methods are parameterized functions that are optimized using some numerical optimization techniques, notably steepest-descent.\nInitial learner is a stump, subsequent learners are trees with depth as some power of 2 (commonly).\nNumerical optimization in function space \\[ g_m(\\mathbf{x}) = E_y\\Big[\\frac{\\partial L(y, F(\\mathbf{x}))}{\\partial F(\\mathbf{x})}|\\mathbf{x}\\Big]_{F(\\mathbf{x})=F_{m-1}(\\mathbf{x})} \\] The optimal step size found by solving\n\\[ \\rho_m = \\mathop{\\arg \\min}_{\\rho} E_{y,\\mathbf{x}}L(y,F_{m-1}(\\mathbf{x})-\\rho g_m(\\mathbf{x})) \\] Then the function \\(m\\) is updated: \\[ f_m(\\mathbf{x}) = -\\rho_m g_m(\\mathbf{x}) \\]\nWalking through it\u0026hellip;\nMake an initial guess with \\(f_0(\\mathbf{x})\\)\nEvaluate \\(L(y, f_0(\\mathbf{x}))\\)\nImprove model by boosting \\(f_1(\\mathbf{x}) = -\\rho_1 g_1(\\mathbf{x})\\), where \\[ g_1(\\mathbf{x}) = \\frac{\\partial L(y, f_0(\\mathbf{x}))}{\\partial f_0(\\mathbf{x})}. \\] This implies that \\(f_1\\) is predicting the gradient of the previous function.\nIf the model is nonparametric, the expected value of the function conditioned on the input cannot be estimated accurately because we cannot sample the entire distribution of \\(\\mathbf{x}\\). The author\u0026rsquo;s note that \u0026ldquo;\u0026hellip;even if it could, one would like to estimate \\(F^*(\\mathbf{x})\\) at \\(\\mathbf{x}\\) values other than the training sample points.\u0026rdquo;\nSmoothness is imposed by approximating the function with a parametric model. I think this means that the distribution is approximated as well.\n\\begin{equation} (\\beta_m, \\mathbf{a}_m) = \\mathop{\\arg \\min}_{\\beta, \\mathbf{a}}\\sum_{i=1}^N L(y_i, F_{m-1}(\\mathbf{x}_i) + \\beta h(\\mathbf{x}_i; \\mathbf{a})) \\end{equation}\nWhat if a solution to the above equation is difficult to obtain? Instead, view \\(\\beta_m h(\\mathbf{x};\\mathbf{a}_m)\\) as the best greedy step toward \\(F^*(\\mathbf{x})\\), under the constraint that the step direction, in this case \\(h(\\mathbf{x};\\mathbf{a}_m)\\), is a member of the class of functions \\(h(\\mathbf{x};\\mathbf{a})\\). The negative gradient can be evaluated at each data point: \\[ -g_m(\\mathbf{x}_i) = -\\frac{\\partial L(y_i, F_{m-1}(\\mathbf{x}_i))}{\\partial F_{m-1}(\\mathbf{x}_i)}. \\]\nThis gradient is evaluated at every data point. However, we cannot generalize to new values not in our dataset. The proposed solution comes via \\(\\mathbf{h}_m = \\{h(\\mathbf{x}_i;\\mathbf{a}_m)\\}_{1}^N\\) \u0026ldquo;most parallel to\u0026rdquo; \\(-\\mathbf{g}_m \\in \\mathbb{R}^N\\).\nAs long as we can compute a derivative for the original loss function, our subsequent boosting problems are solved via least-squared error: \\[ \\mathbf{a}_m = \\mathop{\\arg \\min}_{\\mathbf{a}, \\beta} \\sum_{i=1}^N \\Big(-g_m(\\mathbf{x}_i)-\\beta h(\\mathbf{x}_i;\\mathbf{a})\\Big)^2 \\]\nFigure 1: Original generic algorithm from (Friedman 2001). Check out a basic implementation in Python here.\nReferences Friedman, Jerome H. 2001. “Greedy Function Approximation: A Gradient Boosting Machine.” The Annals of Statistics 29 (5): 1189–1232. https://www.jstor.org/stable/2699986. ","date":1689570000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1689570000,"objectID":"f575924412ebf4cfa533e035a22bcd88","permalink":"https://ajdillhoff.github.io/notes/gradient_boosting/","publishdate":"2023-07-17T00:00:00-05:00","relpermalink":"/notes/gradient_boosting/","section":"notes","summary":"Notes from (Friedman 2001) Many machine learning methods are parameterized functions that are optimized using some numerical optimization techniques, notably steepest-descent.\nInitial learner is a stump, subsequent learners are trees with depth as some power of 2 (commonly).\nNumerical optimization in function space \\[ g_m(\\mathbf{x}) = E_y\\Big[\\frac{\\partial L(y, F(\\mathbf{x}))}{\\partial F(\\mathbf{x})}|\\mathbf{x}\\Big]_{F(\\mathbf{x})=F_{m-1}(\\mathbf{x})} \\] The optimal step size found by solving\n\\[ \\rho_m = \\mathop{\\arg \\min}_{\\rho} E_{y,\\mathbf{x}}L(y,F_{m-1}(\\mathbf{x})-\\rho g_m(\\mathbf{x})) \\] Then the function \\(m\\) is updated: \\[ f_m(\\mathbf{x}) = -\\rho_m g_m(\\mathbf{x}) \\]","tags":["machine learning"],"title":"Gradient Boosting","type":"notes"},{"authors":["Alex Dillhoff"],"categories":null,"content":"Introduction Hidden Markov Models provide a way of modeling the dynamics of sequential information. They have been used for speech recognition, part-of-speech tagging, machine translation, handwriting recognition, and, as we will see in this article, gesture recognition.\nConsider a somewhat practical use-case: you are going to throw a party with a meticulously curated playlist. You would rather not let anyone have the remote as it might get lost, and letting anyone interrupt the playlist with their own selections may derail the entire event. However, you still want to give your guests the ability to control the volume and skip back and forth between tracks in the playlist. We will also assume that guests will use change tracks and control the volume responsibly.\nThe solution to this problem is to implement a gesture recognition system to identify simple hand motions. In this case, we only have to model 4 separate gestures: VolumeUp, VolumeDown, PrevTrack, NextTrack. Since the motions are temporal in nature, we can model each gesture using Hidden Markov Models. First, we need to cover a bit of background on what a Hidden Markov Model actually is.\nBackground First, introduce Markov Chains Then the Markov assumption At the core of our problem, we want to model a distribution over a sequence of states. Consider a sequence of only 3 states \\(p(x_1, x_2, x_3)\\). The full computation of this can be done using the chain rule of probability:\n\\[ p(x_1, x_2, x_3) = p(x_1) p(x_2 | x_1) p(x_3 | x_1, x_2). \\]\nIf the random variables of our problem are not conditionally independent, the complexity of calculating this is exponential in the number of random variables.\nThe Markov in Hidden Markov Models addresses this complexity. The Markov Assumption states that the probability of an event at time \\(t\\) is conditioned only on the previously observed event: \\(p(x_t | x_{t-1})\\). This is compactly represented with a graphical model, as seen in figure TODO.\nTODO: Figure of basic Markov Chain\nThe hidden qualifier comes from the fact that the data we wish to model was generated from some underlying process that is not directly observable. A classic example for HMMs uses the weather. Imagine you had a log which had the number of water bottles a person had drank per day over the entire year. To make the problem slightly more difficult, the log entries were not associated with a date. It is reasonable to say that the amount of water a person drinks is influenced by how hot or cold it is on a particular day. So, the hidden state in this case is the weather: hot or cold. We can model this with an HMM by establishing that the amount of water (observed state) is conditioned on the weather (hidden state). Figure TODO shows this HMM graphically.\nTODO: Figure of HMM\nFormally, a Hidden Markov Model is defined by\nThe number of hidden states \\(N\\). A transition probability matrix \\(A \\in \\mathbb{R}^{N \\times N}\\), where \\(a_{ij} = p(z_t = j | z_{t-1} = i)\\). An observation symbol probability distribution \\(B = \\{b_j(k)\\} = p(\\mathbf{x}_t = k | z_t = j)\\). An initial state distribution \\(\\pi_i = p(z_t = i)\\). The trainable parameters of our model are \\(\\lambda = (A, B, \\pi)\\).\nFunctions of an HMM Given the basic definition of what an HMM is, how can we train the parameters defined in \\(\\lambda\\). If we somehow already knew the parameters, how can we extract useful information from the model? Depending on our task, we can use HMMs to answer many important questions:\nFiltering computes \\(p(z_t | \\mathbf{x}_{1:t})\\). That is, we are computing this probability as new samples come in up to time \\(t\\). Smoothing is accomplished when we have all the data in the sequence. This is expressed as \\(p(z_t|\\mathbf{x}_{1:T})\\). Fixed lag smoothing allows for a trade off between accuracy and delay. It is useful in cases where we might not have the full sequence, but we wish to compute \\(p(z_{t-l}|\\mathbf{x}_{1:t})\\) for some \\(l \u0026gt; 0\\). Predictions are represented as \\(p(z_{t+h}|\\mathbf{x}_{1:t})\\), where \\(h \u0026gt; 0\\). MAP estimation yields the most probably state sequence \\(\\text{arg}\\max_{\\mathbf{z}_{1:T}}p(\\mathbf{z}_{1:T}|\\mathbf{x}_{1:T})\\). We can sample the posterior \\(p(\\mathbf{z}_{1:T}|\\mathbf{x}_{1:T})\\). We can also compute \\(p(\\mathbf{x}_{1:T})\\) by summing up over all hidden paths. This is useful for classification tasks. Of course not all of these functions make sense for every possible task, more on that later. This article is not meant to be an exhaustive resource for all HMM functions; we will only look at the tasks necessary to train and use HMMs for isolated gesture recognition TODO: offer additional reading suggestions.\nData Processing As far as the efficacy of our model goes, how we process the data is the most important. Our system will start with a camera that records our guests performing one of the four simple motions. For simplicity, let\u0026rsquo;s pretend that the camera has an onboard chip that detects the 2D centroids of the left hand for each frame. That helps a lot, but there is still the problem of isolating a group of frames based on when the user wanted to start and finish the command. Assuming we have a solution for both of these problems, we still need to take into account that users will gesture at different speeds. Since all of these problems are challenging in their own right, we will assume the computer vision fairy has taken care of this for us.\nEach gesture in our dataset consists of 30 \\((x, y)\\) locations of the center of the left hand with respect to image coordinates. Even with this simplified data, we have another problem: different users may gesture from different locations. The hand locations for one user performing the VolumeUp gesture may be vastly different from another. This isn\u0026rsquo;t too bad to deal with. We could normalize or training data by subtracting the location of the hand in the first frame from the gesture. That way every input would start at \\((0, 0)\\). We can simplify this even further by using relative motion states.\nRelative Motion States Relative motion states discretize our data, thus simplifying the input space. The idea is quite simple: if the hand moved to the right relative to the previous frame, we assign \\(x = 1\\) for that frame. If it moved to the left, assign \\(x = -1\\). If it didn\u0026rsquo;t move at all, or did not move a significant amount, assign \\(x = 0\\). We apply similar rules for the \\(y\\) locations as well. The TODO: figure below shows the relative motion grid.\nBesides greatly simplifying our input space, meaning we can use a simple categorical distribution to model these observations, we no longer have to worry about the discrepency between where each user performed the gesture.\nModeling a Gesture Our system will consist of 4 HMM models to model the dynamics of each gesture. To determine which gesture was performed, we will given our input sequence to each one and have it compute \\(p(\\mathbf{x}_{1:T}; \\lambda_i)\\), the probability of the observation given the parameters of model \\(i\\). Whichever model gives the high probability wins.\nTODO\nDescribe EM at a high level, show the breakdown of probabilities that need to be known Go into forward-backwards Go back to EM and plug them in Training: Expectation-Maximization If we cannot observe the hidden states directly, how are we supposed to update the model parameters \\(\\lambda = (A, B, \\pi)\\)? We may not have all of the information, but we do have some information. We can use that to fill in the missing values with what we would expect them to be given what we already know. Then, we can update our parameters using those expected values. This is accomplished through a two-stage algorithm called Expectation-Maximization. Those familiar with k-Nearest Neighbors should already be familiar with this process.\nUpdating with Perfect Information It is useful to know how we would update our parameters assuming we had perfect information. If the hidden states were fully observable, then updating our model parameters would be as straightforward as computing the maximum likelihood estimates. For \\(A\\) and \\(\\pi\\), we first tally up the following counts:\n\\[ \\hat{a}_{ij} = \\frac{N_{ij}}{\\sum_j N_{ij}}, \\]\nthe number of times we expect to transition from \\(i\\) to \\(j\\) divided by the number of times we transition from \\(i\\) to any other state. Put simply, this computes the expected transitions from \\(i\\) to \\(j\\) normalized by all the times we expect to start in state \\(i\\).\nFor \\(\\pi\\), we have\n\\[ \\hat{\\pi_i} = \\frac{N_i}{\\sum_i N_i}, \\]\nthe number of times we expect to start in state \\(i\\) divided by the number of times we start in any other state.\nEstimating the parameters for \\(B\\) depends on which distribution we are using for our observation probabilities. For a multinomial distribution, we would compute the number of times we are in state \\(j\\) and observe a symbol \\(k\\) divided by the number of times we are in state \\(j\\):\n\\[ \\hat{b}_{jk} = \\frac{N_{jk}}{N_k}, \\]\nwhere\n\\[ N_{jk} = \\sum_{i=1}^N \\sum_{t=1}^T \\mathbb{1} (z_{i, t}=j, x_{i, t}=k). \\]\nIt is also common to model our emission probability using a Normal distribution. We can even use a parameterized model like a neural network. TODO: provide links to examples of these\nUpdating with Missing Information Now to the real problem: fill in our missing information using our observable data and the current parameter estimates. There are two important statistics that we need to compute, called the sufficient statistics.\nThe expected number of transitions from \\(i\\) to \\(j\\). The expected number of times we are transitioning from \\(i\\) to any other state. Both of these can be computed starting with the same probability conditioned on our observable data:\n\\[ p(z_t = i, z_{t+1} = j|\\mathbf{x}_{1:T}). \\]\nForwards-Backwards Algorithm Implementation in Python Conclusion ","date":1689397200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1689397200,"objectID":"f274eff17c529462e71940e1c4965e60","permalink":"https://ajdillhoff.github.io/articles/intro_to_hmms/","publishdate":"2023-07-15T00:00:00-05:00","relpermalink":"/articles/intro_to_hmms/","section":"articles","summary":"Hidden Markov Models provide a way of modeling the dynamics of sequential information. They have been used for speech recognition, part-of-speech tagging, machine translation, handwriting recognition, and, as we will see in this article, gesture recognition.","tags":["machine learning"],"title":"An Introduction to Hidden Markov Models for Gesture Recognition","type":"articles"},{"authors":["Alex Dillhoff"],"categories":null,"content":" Table of Contents Generalization Bias Variance Bias-Variance Tradeoff Generalization When fitting machine learning models to data, we want them to generalize well to the distribution that we have sampled from. We can measure a model\u0026rsquo;s ability to generalize by evaluating it on previously unseen data that is sampled from the same distribution as the training set. However, we often do not know the true underlying distribution. So we must fit the models to empirical distributions derived from observed data.\nMeasuring bias and variance is crucial for determining the quality of a model. Bias refers to the difference between the average prediction of a model and the correct value we are trying to predict. A model with high bias oversimplifies the problem and leads to high error on both training and test data. Variance refers to the sensitivity of a model to fluctuations in the training set. High variance suggests that the model\u0026rsquo;s performance changes significantly when it is fit on different samplings of the training data, which can lead to overfitting.\nTo achieve good generalization, it is essential to find a balance between bias and variance, minimizing the total error. This can be done by selecting appropriate model complexity and using regularization techniques to prevent overfitting or underfitting. Additionally, model validation techniques, such as hold-out validation and cross-validation, can be employed to assess a model\u0026rsquo;s ability to generalize to unseen data.\nBias Consider fitting a simple linear model to nonlinear data. The model will not be able to generalize well, regardless of the size of the training set. In fact, it would also exhibit poor performance when evaluated on the training set as well. When a model has not learned the patterns in the training data and is likewise unable to generalize to new data, it is known as underfitting. In this case, such a model has high bias.\nFigure 1: Regardless of the dataset sampled, a linear model exhibits high bias. Variance Variance is described in terms of the model fitting procedure and the training data. In terms of data, variance measures dispersion. It could also be interpreted as a measure of diversity. Sets with low variance contain samples that are close to the mean, and sampling from such a set would produce rather consistent data points.\nIn terms of model fitting, a model that fits the training data well but not the test data describes overfitting. This is because the training data is only an empirical sample of the true underlying distribution. A different sampling of the distribution may yield a set that more closely resembles the test set. Due to the variance of the underlying distribution, our model overfits the patterns that exist in the training set.\nFigure 2: A 5th degree polynomial trained on 3 different samplings of the distribution. Bias-Variance Tradeoff If a model is not complex enough to capture the underlying distribution, it will perform poorly on both the training and test sets. Indeed, the model has low bias. If the model is too complex, it will exhibit low bias and high variance, overfitting the training set while failing to generalize well to unseen data. The solution then is to find a tradeoff between bias and variance with respect to the model complexity.\n","date":1688446800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1688446800,"objectID":"957c85788398153f94cf803baeab4aad","permalink":"https://ajdillhoff.github.io/notes/bias_and_variance/","publishdate":"2023-07-04T00:00:00-05:00","relpermalink":"/notes/bias_and_variance/","section":"notes","summary":"Table of Contents Generalization Bias Variance Bias-Variance Tradeoff Generalization When fitting machine learning models to data, we want them to generalize well to the distribution that we have sampled from. We can measure a model\u0026rsquo;s ability to generalize by evaluating it on previously unseen data that is sampled from the same distribution as the training set. However, we often do not know the true underlying distribution. So we must fit the models to empirical distributions derived from observed data.","tags":["machine learning"],"title":"Bias and Variance","type":"notes"},{"authors":["Alex Dillhoff"],"categories":null,"content":" Table of Contents Introduction Box Constraints Updating the Lagrangians The Algorithm Implementation Introduction Paper link: https://www.microsoft.com/en-us/research/publication/sequential-minimal-optimization-a-fast-algorithm-for-training-support-vector-machines/\nSequential Minimal Optimization (SMO) is an algorithm to solve the SVM Quadratic Programming (QP) problem efficiently. Developed by John Platt at Microsoft Research, SMO deals with the constraints of the SVM objective by breaking it down into a smaller optimization problem at each step.\nThe two key components of SMO are\nan analytic method to solving for two Lagrange multipliers at a time and a heuristic for choosing which multipliers to optimize. The original objective is to maximize the margin between the nearest positive and negative examples. For the linear case, if the output is given as\n\\[ u = \\mathbf{w}^T \\mathbf{x} - b, \\]\nwhere \\(\\mathbf{w}\\) is the normal vector to the hyperplane separating the classes, then the margin is given as\n\\[ m = \\frac{1}{\\|w\\|_2}. \\]\nMaximizing this margin yielded the primal optimization problem\n\\begin{align*} \\min_{\\mathbf{w},b} \\frac{1}{2} \\|\\mathbf{w}\\|^2\\\\ \\textrm{s.t.} \\quad \u0026amp; y_i(\\mathbf{w}^T \\mathbf{x} - b) \\geq 1, \\forall i\\\\ \\end{align*}\nThe dual form of the objective function for a Support Vector Machine is\n\\[ \\min_{\\vec\\alpha} \\Psi(\\vec{\\alpha}) = \\min_{\\vec{\\alpha}} \\frac{1}{2}\\sum_{i=1}^N \\sum_{j=1}^N y_i y_j K(\\mathbf{x}_i, \\mathbf{x}_j)\\alpha_i\\alpha_j - \\sum_{i=1}^N \\alpha_i \\]\nwith inequality constraints\n\\[ \\alpha_i \\geq 0, \\forall i, \\]\nand a linear equality constraint\n\\[ \\sum_{i=1}^N y_i \\alpha_i = 0. \\]\nFor a linear SVM, the output is dependent on a weight vector \\(\\mathbf{w}\\) and threshold \\(b\\):\n\\[ \\mathbf{w} = \\sum_{i=1}^N y_i \\alpha_i \\mathbf{x}_i, \\quad b = \\mathbf{w}^T \\mathbf{x}_k - y_k. \\]\nThe threshold is also dependent on the weight vector? The weight vector \\(\\mathbf{w}\\) is computed using the training data. The threshold is only dependent on non-zero support vectors, \\(\\alpha_k \u0026gt; 0\\).\nOverlapping Distributions Slack variables were introduced to allow misclassifications at the cost of a linear penalty. This is useful for datasets that are not linearly separable. In practice, this is accomplished with a slight modification of the original objective function:\n\\begin{align*} \\min_{\\mathbf{w},b} \\frac{1}{2} \\|\\mathbf{w}\\|^2 + C \\sum_{i=1}^N \\xi_i\\\\ \\textrm{s.t.} \\quad \u0026amp; y_i(\\mathbf{w}^T \\mathbf{x} - b) \\geq 1 - \\xi_i, \\forall i\\\\ \\end{align*}\nThe convenience of this formulation is that the parameters \\(\\xi_i\\) do not appear in the dual formulation at all. The only added constraint is\n\\[ 0 \\leq \\alpha_i \\leq C, \\forall i. \\]\nThis is referred to as the box constraint for reasons we shall see shortly.\nBox Constraints The smallest optimization step that SMO solves is that of two variables. Given the constraints above, the solution lies on a diagonal line \\(\\sum_{i=1}^N y_i \\alpha_i = 0\\) bounded within a box \\(0 \\leq \\alpha_i \\leq C, \\forall i\\).\nIsolating for two samples with alphas \\(\\alpha_1\\) and \\(\\alpha_2\\), the constraint \\(\\sum_{i=1}^n y_i \\alpha_i = 0\\) suggests that\n\\[ y_1 \\alpha_1 + y_2 \\alpha_2 = w. \\]\nWe first consider the case when \\(y_1 \\neq y_2\\). Let \\(y_1 = 1\\) and \\(y_2 = -1\\), then \\(a_1 - a_2 = w\\). As \\(\\alpha_1\\) increases, \\(\\alpha_2\\) must also increase to satisfy the constraint.\nFigure 1: Equality constraint for case 1 (from Platt\u0026rsquo;s SMO paper). The other case is when \\(y_1 = y_2\\), then \\(\\alpha_1 + \\alpha_2 = w\\). As \\(\\alpha_1\\) is increased, \\(\\alpha_2\\) is decreased to satisfy the constraint.\nFigure 2: Box constraint for samples of the same class (from Platt\u0026rsquo;s SMO paper). Updating the Lagrangians SMO solves for only two Lagrange multipliers at a time. Solving for only 1 at a time would be impossible under the constraint \\(\\sum_{i=1}^N y_i \\alpha_i = 0\\). The first step is to compute \\(\\alpha_2\\) and constrain it between the ends of the diagonal line segment from the box constraints.\nIf \\(y_1 \\neq y_2\\), then the following bounds are applied to \\(\\alpha_2\\):\n\\begin{equation*} L = \\max(0, \\alpha_2 - \\alpha_1), \\quad H = \\min(C, C + \\alpha_2 - \\alpha_1) \\end{equation*}\notherwise, the bounds are computed as:\n\\begin{equation*} L = \\max(0, \\alpha_2 + \\alpha_1 - C), \\quad H = \\min(C, \\alpha_2 + \\alpha_1) \\end{equation*}\nUpdating the actual parameter is done following the update rule of gradient descent:\n\\[ \\alpha_2^{\\text{new}} = \\alpha_2 + \\frac{y_2(E_1 - E_2)}{\\eta}. \\]\nHow do we arrive at this update rule?\nSecond Derivative of the Objective Function Here, \\(\\eta\\) represents the step size and direction. It is computed from the second derivative of the objective function along the diagonal line. To see that this is the case, consider the original objective function\n\\begin{align*} \\min_{\\mathbf{\\alpha}} \\quad \u0026amp; \\frac{1}{2} \\sum_{i=1}^N \\sum_{j=1}^N y_i y_j K(\\mathbf{x}_i, \\mathbf{x}_j) \\mathbf{\\alpha}_1 \\mathbf{\\alpha}_2 - \\sum_{i=1}^N \\alpha_i\\\\ \\textrm{s.t.} \\quad \u0026amp; 0 \\leq \\alpha_i \\leq C, \\forall i\\\\ \u0026amp; \\sum_{i=1}^N y_i \\alpha_i = 0\\\\ \\end{align*}\nSince we are optimizing with respect to only 2 Lagrangian multipliers at a time, we can write the Lagrangian function as\n\\[ \\frac{1}{2} y_1^2 K_{11} \\alpha_1^2 + \\frac{1}{2} y_2^2 K_{22} \\alpha_2^2 + y_1 \\alpha_1 \\sum_{j=3}^N y_j \\alpha_j K_{1j} + y_2 \\alpha_2 \\sum_{j=3}^N y_j \\alpha_j K_{2j} - \\alpha_1 - \\alpha_2 + \\sum_{j=3}^N \\alpha_j \\]\nWe are only optimizing with respect to \\(\\alpha_1\\) and \\(\\alpha_2\\), the next step is to extract those terms from the sum. This is simplified further by noting that \\(\\sum_{j=3}^N y_j \\alpha_j K_{ij}\\) looks very similar to the output of an SVM:\n\\[ u = \\sum_{j=1}^N y_j \\alpha_j K(\\mathbf{x}_j, \\mathbf{x}) - b. \\]\nThis allows us to introduce a variable \\(v_i\\) based on \\(u_i\\), the output of an SVM given sample \\(\\mathbf{x}_i\\):\n\\[ v_i = \\sum_{j=3}^N y_j \\alpha_j K_{ij} = u_i + b - y_1 \\alpha_1 K_{1i} - y_2 \\alpha_2 K_{2i}. \\]\nThe objective function is then written as\n\\[ \\frac{1}{2} y_1^2 K_{11} \\alpha_1^2 + \\frac{1}{2} y_2^2 K_{22} \\alpha_2^2 + y_1 \\alpha_1 v_1 + y_2 \\alpha_2 v_2 - \\alpha_1 - \\alpha_2 + \\sum_{j=3}^N \\alpha_j. \\]\nNote that the trailing sum \\(\\sum_{j=3}^N \\alpha_j\\) is treated as a constant since those values are not considered when optimizing for \\(\\alpha_1\\) and \\(\\alpha_2\\).\nGiven the box constraints from above, we must update \\(\\alpha_1\\) and \\(\\alpha_2\\) such that\n\\[ \\alpha_1 + s \\alpha_2 = \\alpha_1^* + s \\alpha_2^* = w. \\]\nThis linear relationship allows us to express the objective function in terms of α_2:\n\\[ \\Psi = \\frac{1}{2} y_1^2 K_{11} (w - s \\alpha_2)^2 + \\frac{1}{2} y_2^2 K_{22} \\alpha_2^2 + y_1 (w - s \\alpha_2) v_1 + y_2 \\alpha_2 v_2 - \\alpha_1 - \\alpha_2 + \\sum_{j=3}^N \\alpha_j. \\]\nThe extremum of the function is given by the first derivative with respect to \\(\\alpha_2\\):\n\\[ \\frac{d\\Psi}{d\\alpha_2} = -sK_{11}(w - s\\alpha_2) + K_{22}\\alpha_2 - K_{12}\\alpha_2 + s K_{12} (w - s \\alpha_2) - y_2 v_2 + s + y_2 v_2 - 1 = 0. \\]\nIn most cases, the second derivative will be positive. The minimum of \\(\\alpha_2\\) is where\n\\begin{align*} \\alpha_2 (K_{11} + K_{22} - 2 K_{12}) \u0026amp;= s(K_{11} - K_{12})w + y_2(v_1 - v_2) + 1 - s\\\\ \u0026amp;= s(K_{11} - K_{12})(s\\alpha_2^*+\\alpha_1^*)\\\\ \u0026amp;+ y_2(u_1-u_2+y_1\\alpha_1^*(K_{12} - K_{11}) + y_2 \\alpha_2^* (K_{22} - K_{21})) + y_2^2 - s\\\\ \u0026amp;= \\alpha_2^*(K_{11}+K_{22} - 2K_{12}) + y_2(u_1 - u_2 + y_2 - y_1). \\end{align*}\nIf we let \\(E_1 = u_1 - y_1\\), \\(E_2 = u_2 - y_2\\), and \\(\\eta = K_{11} + K_{22} - 2K_{12}\\), then\n\\[ \\alpha_2^{\\text{new}} = \\alpha_2 + \\frac{y_2(E_1 - E_2)}{\\eta}. \\]\nThe Algorithm Sequential Minimal Optimization (SMO) solves the SVM problem which usually requires a Quadratic Programming (QP) solution. It does this by breaking down the larger optimization problem into a small and simple form: solving for two Lagrangians. Solving for one would not be possible without violating KKT conditions. There are two components to Sequential Minimal Optimization: the first is how the Lagrangians are selected and the second is the actual optimization step.\nChoosing the First Lagrangian The algorithm first determines which samples in the dataset violate the given KKT conditions. Only those violating the conditions are eligible for optimization. Additionally, samples that are not on the bounds are selected (those with \\(\\alpha_i \\neq 0\\) and \\(\\alpha_i \\neq C\\)). This continues through the dataset until no sample violates the KKT constraints within \\(\\epsilon\\).\nAs a last step, SMO searches the entire dataset to look for any bound samples that violate KKT conditions.\nChoosing the Second Lagrangian The second Lagrangian is chosen to maximize the size of the step taken during joint optimization. Noting that the step size is based on\n\\[ \\alpha_2^{\\text{new}} = \\alpha_2 + \\frac{y_2(E_1 - E_2)}{\\eta}, \\]\nit is approximated by computing \\(|E_1 - E_2|\\).\nIf positive progress cannot be made given the choice of Lagrangian, SMO will begin iterating through non-bound examples. If no eligible candidates are found in the non-bound samples, the entire dataset is searched.\nUpdating the Parameters With the second derivative of the objective function, we can take an optimization step along the diagonal line. To ensure that this step adheres to the box constraints defined above, the new value of \\(\\alpha_2\\) is clipped:\n\\begin{equation*} \\alpha_2^{\\text{new,clipped}} = \\begin{cases} H \u0026amp;\\text{if} \\quad \\alpha_2^{\\text{new}} \\geq H;\\\\ \\alpha_2^{\\text{new}} \u0026amp;\\text{if} \\quad L \u0026lt; \\alpha_2^{\\text{new}} \u0026lt; H;\\\\ L \u0026amp;\\text{if} \\quad \\alpha_2^{\\text{new}} \\geq L.\\\\ \\end{cases} \\end{equation*}\nWith the new value of \\(\\alpha_2\\), \\(\\alpha_1\\) is computed such that the original KKT condition is preserved:\n\\[ \\alpha_1^{\\text{new}} = \\alpha_1 + s(\\alpha_2 - \\alpha_2^{\\text{new,clipped}}), \\]\nwhere \\(s = y_1y_2\\).\nPoints that are beyond the margin are given an alpha of 0: \\(\\alpha_i = 0\\). Points that are on the margin satisfy \\(0 \u0026lt; \\alpha_i \u0026lt; C\\). These are the support vectors. Points inside the margin satisfy \\(\\alpha_i = C\\).\nLinear SVMs In the case of linear SVMs, the parameters can be stored as a single weight vector\n\\[ \\mathbf{w}^{\\text{new}} = \\mathbf{w} + y_1 (\\alpha_1^{\\text{new}} - \\alpha_1)\\mathbf{x}_1 + y_2(\\alpha_2^{\\text{new,clipped}} - \\alpha_2)\\mathbf{x}_2. \\]\nThe output of a linear SVM is computed as\n\\[ u = \\mathbf{w}^T \\mathbf{x} - b. \\]\nNonlinear SVMs In the nonlinear case, the output of the model is computed as\n\\[ u = \\sum_{i=1}^N y_i \\alpha_i K(\\mathbf{x}_i, \\mathbf{x}) - b. \\]\nImplementation An implementation of SMO in Python is available at https://github.com/ajdillhoff/CSE6363/blob/main/svm/smo.ipynb\n","date":1656910800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1656910800,"objectID":"d82d40256130c8b03c7cfd6f8e1a5a3b","permalink":"https://ajdillhoff.github.io/notes/sequential_minimal_optimization/","publishdate":"2022-07-04T00:00:00-05:00","relpermalink":"/notes/sequential_minimal_optimization/","section":"notes","summary":"Table of Contents Introduction Box Constraints Updating the Lagrangians The Algorithm Implementation Introduction Paper link: https://www.microsoft.com/en-us/research/publication/sequential-minimal-optimization-a-fast-algorithm-for-training-support-vector-machines/\nSequential Minimal Optimization (SMO) is an algorithm to solve the SVM Quadratic Programming (QP) problem efficiently. Developed by John Platt at Microsoft Research, SMO deals with the constraints of the SVM objective by breaking it down into a smaller optimization problem at each step.\nThe two key components of SMO are\nan analytic method to solving for two Lagrange multipliers at a time and a heuristic for choosing which multipliers to optimize.","tags":["machine learning"],"title":"Sequential Minimal Optimization","type":"notes"},{"authors":["Alex Dillhoff"],"categories":null,"content":" Table of Contents Introduction Binary Classification Plotting a Decision Boundary Multiple Classes Sensitivity to Outliers Introduction The notebook for this lesson can be found here.\nWith linear regression, we were able to fit a model to our data in order to make inferences on unseen data points. In the examples, both the input features and observation were continuous. With discriminant functions, we will use similar models to classify the data points based on their input features. We start out with the simplest approach: we assume that the data is linearly separable and can be assigned one of \\(K\\) discrete classes.\nFor classification with linear discriminant functions, we will use a \\(K\\) dimensional vector that has a 1 corresponding to the class encoding for that input and a 0 for all other positions. For example, if our possible target classes were \\(\\{\\text{car, truck, person}\\}\\), then a target vector for \\(\\text{person}\\) would be \\(\\mathbf{y} = [0, 0, 1]^T\\).\nThis article will stick to a discriminative approach to classification. That is, we define a discriminant function which assigns each data input \\(\\mathbf{x}\\) to a class. For a probabilistic perspective, see Linear Discriminant Analysis.\nWe will again start with a linear model \\(y = f(\\mathbf{x}; \\mathbf{w})\\). Unlike the model used with linear regression, ours will need to predict a discrete class label. In other words, we need to predict a vector with a 1 corresponding to the class encoding.\nBinary Classification Consider a simple dataset with 2 features per data sample. Our goal is to classify the data as being one of two possible classes. This only requires a single function which classifies the sample as being in class 0 if \\(f(\\mathbf{x};\\mathbf{w}) \\geq 0\\) and class 1 otherwise.\nFigure 1: Two groups of data that are very clearly linearly separable. The model output is such that \\(f(\\mathbf{x};\\mathbf{w}) = [1, 0]\\) when \\(\\mathbf{x}\\) is predicted as class 1. If \\(f(\\mathbf{x};\\mathbf{w}) = [0, 1]\\) then \\(\\mathbf{x}\\) is assigned to class 2. In practice, the actual output will not be a one-hot vector. There will be some values in all positions of the vector.\nFor example, a model trained on a binary classification task outputs the following vector given a randomly selected input sample:\n\\[ [0.1224, 0.8776] \\]\nA class would be assigned by taking the argmax of this output vector. That is, the model predicts that this sample belongs to class 1.\nMeasuring Classifier Performance L1 loss can be used to measure classifier performance for linear discriminant function models.\n\\[ E = \\sum_{i=1}^N \\sum_{j=1}^M |\\hat{y}_{ij} - y_{ij}| \\]\nPlotting a Decision Boundary In the case of binary classification, a sample is predicted as class 1 if the output vector has the highest value at index 0. Otherwise, it is classified as class 2. If we were to plot the decision regions, we would see that the boundary is at the point when the output for both classes is equal.\nFigure 2: Binary classification with decision regions shown. Multiple Classes Extending this to multiple classes is as easy as encoding the classes in a one-hot vector whose length equals the number of classes. The parameters of the model can be obtained using gradient descent, the normal equations, or any other method that optimizes the least squares criterion.\nThe figure below shows an example of a linear discriminant function model fit to a dataset with 3 classes.\nFigure 3: Multiclass classification using linear discriminant functions. Sensitivity to Outliers One major flaw with least squares models is their sensitivity to outliers in the data. Consider the dataset shown below.\nFigure 4: Linearly separable dataset This dataset is clearly linearly separable. This will be no problem for our linear classifier, as seen below.\nFigure 5: Linear classifier fit to data using least squares. This dataset has a convenient property that the samples from each class are tightly clustered. What happens if our data is slightly more diverse?\nFigure 6: 2-class dataset in which one class is not as tightly clustered as the other. In the dataset above, we can still clearly see that it should be linearly separable. Unfortunately, our least squares model will be very sensitive to the 20 points at the top left of the plot. Training a linear discriminant function using least squares results in the following decision boundary.\nFigure 7: The model misclassifies samples that should be linearly separable. If we determine that a linear classifier is adequate for a given dataset, we may wish to use a slightly more robust model such as Logistic Regression instead of linear discriminant functions.\n","date":1654578000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1654578000,"objectID":"4eeb3b49e53888a547d60e92fc258530","permalink":"https://ajdillhoff.github.io/notes/discriminant_functions/","publishdate":"2022-06-07T00:00:00-05:00","relpermalink":"/notes/discriminant_functions/","section":"notes","summary":"Table of Contents Introduction Binary Classification Plotting a Decision Boundary Multiple Classes Sensitivity to Outliers Introduction The notebook for this lesson can be found here.\nWith linear regression, we were able to fit a model to our data in order to make inferences on unseen data points. In the examples, both the input features and observation were continuous. With discriminant functions, we will use similar models to classify the data points based on their input features.","tags":null,"title":"Discriminant Functions","type":"notes"},{"authors":["Alex Dillhoff"],"categories":null,"content":" Table of Contents TODO Introduction AdaBoost TODO Gradient Boosting Introduction Combining predictions from multiple sources is usually preferred to a single source. For example, a medical diagnosis would carry much more weight if it was the result of a consensus of several experts. This idea of prediction by consensus is a powerful way to improve classification and regression models. In fact, good performance of a committee of models can be achieved even if each individual model is conceptually very simple.\nBoosting is one such way of building a committee of models for classification or regression and is popularly implemented by an algorithm called AdaBoost.\nAdaBoost Given a dataset \\(\\{\\mathbf{x}_i\\}\\) and target variables \\(\\{\\mathbf{y}_i\\}\\), AdaBoost first initializes a set of weights corresponding to each data sample as \\(w_i = \\frac{1}{N}\\). At each step of the algorithm, a simple classifier, called a weak learner is fit to the data. The weights for each sample are adjusted based on the individual classifier\u0026rsquo;s performance. If the sample was misclassified, the relative weight for that sample is increased. After all classifiers have been fit, they are combined to form an ensemble model.\nThe Algorithm Initialize data weights \\({w_i}\\) as \\(w_i^{(1)} = \\frac{1}{n}\\) for \\(i = 1, \\dots, n\\).\nFit each weak learner \\(j\\) to the training data by minimizing the misclassification cost:\n\\[ \\sum_{i=1}^n w_i^{(j)} \\mathbb{1}(f_j(\\mathbf{x}_i) \\neq \\mathbf{y}_i) \\]\nCompute a weighted error rate\n\\[ \\epsilon_j = \\frac{\\sum_{i=1}^n w_i^{(j)} \\mathbb{1}(f_j(\\mathbf{x}_i) \\neq \\mathbf{y}_i)}{\\sum_{i=1}^n w_i^{(j)}} \\]\nUse the weighted error rate to compute a weight for each classifier such that misclassified samples are given higher weight:\n\\[ \\alpha_j = \\ln \\bigg\\{\\frac{1 - \\epsilon_j}{\\epsilon_j}\\bigg\\}. \\]\nUpdate the data weights for the next model in the sequence:\n\\[ w_i^{j+1} = w_i^{j} \\exp\\{\\alpha_j \\mathbb{1}(f_j(\\mathbf{x}_i \\neq \\mathbf{y}_i)\\}. \\]\nOnce all weak learners are trained, the final model predictions are given by\n\\[ Y_M(\\mathbf{x}) = \\text{sign} \\Bigg(\\sum_{j=1}^M \\alpha_j f_j(\\mathbf{x})\\Bigg). \\]\nWeak Learners The weak learners can be any classification or regression model. However, they are typically chosen to be very simple to account for training time. For example, a complex deep learning model would be a poor choice for a weak learner.\nOne example of a weak learner is a simple linear model like a Perceptron or decision stump. A standard implementation of AdaBoost uses a decision tree with depth 1, as observed in sklearn\u0026rsquo;s implementation.\nExample Let\u0026rsquo;s put this together and walk through the first few steps of training an AdaBoost model using a decision stump as the weak learner. We will use a very simple dataset to keep the values easy to compute by hand.\nInitial Data\nx1 x2 y weight 1 5 0 0.2 2 6 1 0.2 3 7 0 0.2 4 8 1 0.2 5 9 1 0.2 Weak Learner 1\nThe first learner is trained on the initial data and picks \\(x_1 = 2.5\\) as the split threshold. Input where \\(x_1 \\leq 2.5\\) is assigned to class 0 and all other samples are assigned class 1. The data with this learner\u0026rsquo;s predictions are shown below.\nx1 x2 y weight prediction 1 5 0 0.2 0 2 6 1 0.2 0 3 7 0 0.2 1 4 8 1 0.2 1 5 9 1 0.2 1 Error and weight\nThe error is simple enough to compute as all samples are currently weighted equally. Since two of the samples were misclassified, the error is the sum of their weights.\nTotal error\n\\(e_1 = 0.2 + 0.2 = 0.4\\).\nThe weight of the classifier can then be computed.\nClassifier weight\n\\(\\alpha_1 = \\frac{1}{2} \\ln \\big(\\frac{1 - e_1}{e_1}\\big) = 0.2027\\).\nThe weights of our data can now be updated using this value of \\(\\alpha_1\\). The weight of each example is updated by multiplying each correctly classifed sample by \\(\\exp\\{-\\alpha_1\\}\\) and each incorrectly classified sample by \\(\\exp\\{\\alpha\\}\\):\n\\[ w_i^{j+1} = w_i^{j} \\exp\\{\\alpha_j \\mathbb{1}(f_j(\\mathbf{x}_i \\neq \\mathbf{y}_i)\\}. \\]\nNOTE: You will notice that the equation above is different from the actual update rule that was applied to the weights in this example. In the original publication (TODO: reference Fruend), the weights are renormalized at the end of the loop. In this example, the normalization is combined with the update. In either case, the updated weights are shown below.\nx1 x2 y weight 1 5 0 0.167 2 6 1 0.250 3 7 0 0.250 4 8 1 0.167 5 9 1 0.167 Weak Learner 2\nThe algorithm now moves to the next weak learner, which classifies the data given a threshold of \\(x_1 = 3.5\\). Its predictions are shown below.\nx1 x2 y weight prediction 1 5 0 0.167 0 2 6 1 0.250 0 3 7 0 0.250 0 4 8 1 0.167 1 5 9 1 0.167 1 Only a single sample is misclassified, and the error is computed as before.\nTotal error\n\\(e_2 = 0.250\\)\nClassifier weight\n\\(\\alpha_2 = \\frac{1}{2} \\ln \\big(\\frac{1 - e_2}{e_2}\\big) = 0.5493\\)\nThe weights are updated for each sample, yielding the following data:\nx1 x2 y weight 1 5 0 0.111 2 6 1 0.500 3 7 0 0.167 4 8 1 0.111 5 9 1 0.111 The second sample has been misclassified twice at this point, leading to a relatively high weight. This will hopefully be addressed by the third learner.\nWeak Learner 3\nThe final weak learner splits the data on \\(x_2 = 6.5\\), yielding the following output for each sample.\nx1 x2 y weight prediction 1 5 0 0.111 0 2 6 1 0.500 0 3 7 0 0.167 1 4 8 1 0.111 1 5 9 1 0.111 1 Unfortunately, sample 2 is too tricky for any of our weak learners. The total error is shown below. Since this is a binary classification problem, the error suggests that our weak learner performs worse than random guessing.\nTotal error\n\\(e_3 = 0.667\\)\nClassifier weight\n\\(\\alpha_3 = \\frac{1}{2} \\ln \\big(\\frac{1 - e_3}{e_3}\\big) = -0.3473\\)\nThe negative value of the classifier weight suggests that its predictions will be reversed when evaluated. The updated weights of each data sample are given below.\nx1 x2 y weight 1 5 0 0.167 2 6 1 0.375 3 7 0 0.125 4 8 1 0.167 5 9 1 0.167 Final Classifier\nThe final classifier is a weighted vote of the three weak learners, with the weights being the classifier weights we calculated (0.2027, 0.5493, and -0.3473). The negative weight means that the third learner\u0026rsquo;s predictions are reversed.\n","date":1648011600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1648011600,"objectID":"a74fb661122bb4b9319a36a6668cd31f","permalink":"https://ajdillhoff.github.io/notes/boosting/","publishdate":"2022-03-23T00:00:00-05:00","relpermalink":"/notes/boosting/","section":"notes","summary":"Table of Contents TODO Introduction AdaBoost TODO Gradient Boosting Introduction Combining predictions from multiple sources is usually preferred to a single source. For example, a medical diagnosis would carry much more weight if it was the result of a consensus of several experts. This idea of prediction by consensus is a powerful way to improve classification and regression models. In fact, good performance of a committee of models can be achieved even if each individual model is conceptually very simple.","tags":["machine learning"],"title":"Boosting","type":"notes"},{"authors":["Alex Dillhoff"],"categories":null,"content":" Table of Contents Resources Introduction Example: Iris Dataset Growing a Tree Examining the Iris Classification Tree Pruning a Tree The Algorithm Resources https://www.kaggle.com/dmilla/introduction-to-decision-trees-titanic-dataset Introduction A decision tree, or Classification and Regression Trees (CART), is a model that recursively partitions the input space based on a collection of features. The partitions are split based on very simple binary choices. If yes, branch to the left; if no, branch to the right.\nFigure 1: Regression tree (left) and its piecewise constant surface (right) (Source: Machine Learning: A Probabilistic Perspective by Kevin P. Murphy). To compute the response, we represent each individual decision as a function \\(\\phi\\) and sum the responses:\n\\[ f(\\mathbf{x}) = \\mathbb{E}[y | \\mathbf{x}] = \\sum_{m=1}^M w_m \\mathbb{1} (\\mathbf{x} \\in R_m) = \\sum_{m=1}^M w_m \\phi(\\mathbf{x};\\mathbf{v}_m), \\]\nwhere \\(R_m\\) is the \\(m^{\\text{th}}\\) region, \\(w_m\\) is the mean response, and \\(\\mathbf{v}_m\\) is the choice of variable to split on along with its threshold value.\nExample: Iris Dataset To see this on real data, consider the Iris flower dataset. For example, we will look at a decision tree model that classifies each flower into either setosa, versicolor, or virginica.\nFigure 2: Our initial Iris classifier. We are given data about a new iris and want to classify it using this tree. Our sample has a sepal length of 6.1cm, a sepal width of 2.8cm, a petal length of 4.7cm, and a petal width of 1.2cm. The first decision considers the petal width. Our sample has a width of 1.2, so it continues down the right branch.\nThe second decision consideres petal width again. Since our sample does not have a width greater than 1.75, we continue down the left branch.\nAt this point, the model was optimized to now consider the petal length. Our length comes in at 4.7, just shy of going down the right path.\nWe now arrive at the last decision. Since our petal length is not greater than 1.65, the model classifies this sample as versicolor.\nGrowing a Tree To grow a tree, a decision needs to be made as to whether or not the current set of data can be split based on some feature. As such, there should be a reliable way of determining if a feature provided a good split. This is evaluated using a cost function and selecting the feature and value corresponding to the minimum cost:\n\\[ (j^*, t^*) = \\text{arg} \\min_{j\\in\\{1, \\dots, D\\}} \\min_{t \\in \\mathcal{T}_j} \\text{cost}(\\{\\mathbf{x}_i, y_i : x_{ij} \\leq t\\}) + \\text{cost}(\\{\\mathbf{x}_i, y_i : x_{ij} \u0026gt; t\\}). \\]\nIn words, this function finds a value \\(t\\) such that groups the data with the lowest cost. For a regression task, the cost function is typically defined as\n\\[ \\text{cost}(\\mathcal{D}) = \\sum_{i \\in \\mathcal{D}}(y_i - \\bar{y})^2, \\]\nwhere\n\\[ \\bar{y} = \\frac{1}{|\\mathcal{D}|}\\sum_{i \\in \\mathcal{D}} y_i. \\]\nSplits that result in clusters with high variance may still see a higher cost, even though they are the minimum.\nAs their alternative name implies, decision trees can also be used for classification. The splits are still based on features and threshold values at each branch. When a split is considered, a class-conditional probability is estimated for that data. Given data satisfying \\(X_j \u0026lt; t\\), the class-conditional probability is\n\\[ \\hat{\\pi}_c = \\frac{1}{|\\mathcal{D}|}\\sum_{i \\in \\mathcal{D}} \\mathbb{1}(y_i = c). \\]\nThe common error functions used for classification are misclassification rate, entropy, and Gini index. Misclassification rate is computed by summing the number of misclassifications:\n\\[ \\frac{1}{|\\mathcal{D}|} \\sum_{i \\in \\mathcal{D}} \\mathbb{1}(y_i \\neq \\hat{y}) = 1 - \\hat{\\pi}_{\\hat{y}}. \\]\nEntropy is computed as\n\\[ \\mathbb{H}(\\mathbb{\\hat{\\pi}}) = -\\sum_{c=1}^C \\hat{\\pi}_c \\log \\hat{\\pi}_c. \\]\nGini index computes the expected error rate.\n\\[ G = \\sum_{c=1}^C \\hat{\\pi}_c (1 - \\hat{\\pi}_c) = 1 - \\sum_{c=1}^C \\hat{\\pi}_c^2 \\]\nFigure 3: Impurity measured for binary classification (Source: Machine Learning: A Probabilistic Perspective by Kevin P. Murphy) Like entropy, it promotes an equal number of observations across all classes in a node. For small values of \\(\\hat{\\pi}\\), the error is smaller than that of entropy. If the dataset is imbalanced, entropy is typically favored as it penalizes imbalanced datasets more than Gini will. Both will favor splits that result in one node being pure.\nStopping Growth If left unchecked, the algorithm to grow a tree will continue until the data can no longer be split. In the trivial case, this will be when every data point represents a leaf node. In order to prevent overfitting, there are several criteria that are considered.\nDoes the split reduce the cost enough? It may be ideal to only split the data if the cost is reduced by some acceptable value. The reduction can be computed by\n\\[ \\Delta = \\text{cost}(\\mathcal{D}) - \\bigg(\\frac{|\\mathcal{D}_L|}{|\\mathcal{D}|}\\text{cost}(\\mathcal{D}_L) + \\frac{|\\mathcal{D}_R|}{|\\mathcal{D}|} \\text{cost}(\\mathcal{D}_R)\\bigg). \\]\nHas the tree reached some maximum depth? The depth of a tree is set as a hyperparameter. Later, when we look at an example, we will use cross validation to select the best depth parameter for our model.\nIs the distribution of the split pure? If either of the splits is fully made up of data with the same label, there is no need to split it any further.\nIs the split too small? A split that is too small may lead to overfitting.\nExamining the Iris Classification Tree How exactly does the earlier example model make its decision at each node? The full tree is shown below.\nFigure 4: A detailed view of our Iris classifier. The first split is visually very simple to intuit. Using petal width can perfectly split all setosa samples into a single leaf node.\nPruning a Tree Depending on the data, stopping growth based on measuring the relative decrease in error may not result in a model that performs well. Image a dataset that requires multiple features to provide a sufficient classification. If only one of the features is considered in isolation, it may provide no decrease in error. A practical example of this is the XOR problem. Splitting on \\(x_1\\) or \\(x_2\\) in isolation does not provide any indication about the true output. It is only when \\(x_1 \\neq x_2\\) does the output equal to 1.\nTo rectify this, a tree can be grown until it is completely full before pruning the branches that result in the smallest increase in error.\nThe Algorithm The general algorithm is shown in MATLAB below.\n% node = fitTree(node, D, depth) % Recursive function to learn a decision tree % Returns the index of the current node. % % node - The node index in obj.Nodes. % D - Indices to the current data. % depth - Current depth of the tree. function node = fitTree(obj, node, D, depth) % Determine best split for the data and return the split [j, t, dSplit, classDist] = obj.split(D, obj.Nodes(node).features); obj.Nodes(node).prediction = classDist; disp(classDist); % Use heuristic to determine if node is worth splitting if obj.splitNode(depth, classDist) == true % set the node test, the function that determines the branch obj.Nodes(node .test = {j, t}; newFeatures = obj.Nodes(node).features(obj.Nodes(node).features ~= j); % set the child nodes to the left and right splits obj.Nodes(node).children = zeros(size(dSplit, 1), 1); numNewNodes = size(dSplit, 1); for i = 1 : numNewNodes obj.Nodes(end + 1) = struct(\u0026#39;prediction\u0026#39;, 0, \u0026#39;test\u0026#39;, 0, ... \u0026#39;features\u0026#39;, newFeatures, \u0026#39;children\u0026#39;, 0, \u0026#39;parent\u0026#39;, node); obj.Nodes(node).children(i) = obj.fitTree(length(obj.Nodes), dSplit{i}, depth + 1); end end end ","date":1647579600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1647579600,"objectID":"cb086cf2a1081a79001139440f6b6605","permalink":"https://ajdillhoff.github.io/notes/decision_trees/","publishdate":"2022-03-18T00:00:00-05:00","relpermalink":"/notes/decision_trees/","section":"notes","summary":"Table of Contents Resources Introduction Example: Iris Dataset Growing a Tree Examining the Iris Classification Tree Pruning a Tree The Algorithm Resources https://www.kaggle.com/dmilla/introduction-to-decision-trees-titanic-dataset Introduction A decision tree, or Classification and Regression Trees (CART), is a model that recursively partitions the input space based on a collection of features. The partitions are split based on very simple binary choices. If yes, branch to the left; if no, branch to the right.","tags":["machine learning"],"title":"Decision Trees","type":"notes"},{"authors":["Alex Dillhoff"],"categories":null,"content":" Table of Contents Introduction The Markov Assumption Definition Evaluation The Viterbi Algorithm Estimating Parameters Expectation Maximization Introduction This article is essentially a grok of a tutorial on HMMs by (RABINER 1989). It will be useful for the reader to reference the original paper.\nUp to this point, we have only explored \u0026ldquo;atomic\u0026rdquo; data points. That is, all of the information about a particular sample is encapsulated into one vector. Sequential data is easily represented by graphical models. This article introduces Hidden Markov Models, a powerful probabilistic graphical model used in many applications from gesture recognition to natural language processing.\nThere are many tasks for which we do not know the underlying process. However, we can observe samples that are produced from such processes. Music, gesture recognition, speech, text, etc. All of these have some underlying process which forms their outputs together into a hopefully coherent sequence. If we wish to make predictions about future samples given these sequences, we will need to make some guess about the underlying processes defining their output.\nThe Markov Assumption Markov models make a convenient assumption about sequential data. That is, all relevant information required for predicting future samples is captured in the current time step \\(t\\). Given a joint distribution over an input of \\(T\\) frames, \\(p(\\mathbf{x}_{1:T})\\), the Markov assumption allows us to represent it as\n\\[ p(\\mathbf{x}_{1:T}) = p(\\mathbf{x}_1)\\prod_{t=2}^T p(\\mathbf{x}_t|\\mathbf{x}_{t-1}) \\]\nDefinition A more complicated case is when we are attempting to model some unknown process that is responsible for the observations. In this case, an ordinary Markov chain is not sufficient. A hidden Markov model (HMM) is defined by a set \\(z_t \\in \\{1, \\dots, K\\}\\) of discrete hidden states and an observation model \\(p(\\mathbf{x}_i|z_t)\\). The joint probability distribution of this model is given by\n\\[ p(\\mathbf{z}, \\mathbf{x}) = p(\\mathbf{z})p(\\mathbf{x}|\\mathbf{z}) = \\Big(p(z_1)\\prod_{t=2}^Tp(z_t|z_{t-1})\\Big)\\Big(\\prod_{t=1}^Tp(\\mathbf{x}_t|z_t)\\Big). \\]\nFigure 1: The observations y are generated by the latent states x. Source: Wikipedia Although the states themselves are discrete, the observations may be continuous: \\(p(\\mathbf{x}|z_t, \\mathbf{\\theta})\\). If they are discrete, they can be modeled by an observation matrix \\(B\\). Continuous observations are typically modeled using a conditional Gaussian:\n\\[ p(\\mathbf{x}_t|z_t=k, \\theta) = \\mathcal{N}(\\mathbf{x}_t|\\mathbf{\\mu}_k,\\mathbf{\\Sigma}_k). \\]\nFollowing Rabiner, an HMM can be characterized by\nThe number of states in the model \\(N\\). The number of distinct observation symbols per state \\(M\\). The state probability distribution \\(A = \\{a_{ij}\\}\\), \\(a_{ij} = p(z_t=j | z_{t-1} = i)\\). The observation symbol probability distribution \\(B = \\{b_j(k)\\} = p(\\mathbf{x}_t = k|z_t = j)\\). An initial state distribution \\(\\mathbf{\\pi}_i = p(z_t = i)\\). Figure 2: HMM with observation probabilities and state transition probabilities. Source: Wikipedia The observation probability distribution is commonly modeled as a Gaussian, Mixture of Gaussians, or Multinomial distribution. Thus, the parameter estimates for those distributions follow the likelihood estimates for each respective distribution.\nIn his famous tutorial on HMMs, Rabiner addressed the three fundamental problems of HMMs:\nGiven an observation sequence and model parameters, how do we compute the probability of the observation sequence given the parameters (likelihood)? Given an observation sequence and model parameters, how do we choose a state sequence which is optimal (decoding)? How do we adjust the model parameters (learning)? HMMs are able to solve several different inference problems.\nFiltering computes \\(p(z_t | \\mathbf{x}_{1:t})\\). That is, we are computing this probability as new samples come in up to time \\(t\\). Smoothing is accomplished when we have all the data in the sequence. This is expressed as \\(p(z_t|\\mathbf{x}_{1:T})\\). Fixed lag smoothing allows for a trade off between accuracy and delay. It is useful in cases where we might not have the full sequence, but we wish to compute \\(p(z_{t-l}|\\mathbf{x}_{1:t})\\) for some \\(l \u0026gt; 0\\). Predictions are represented as \\(p(z_{t+h}|\\mathbf{x}_{1:t})\\), where \\(h \u0026gt; 0\\). MAP estimation yields the most probably state sequence \\(\\text{arg}\\max_{\\mathbf{z}_{1:T}}p(\\mathbf{z}_{1:T}|\\mathbf{x}_{1:T})\\). We can sample the posterior \\(p(\\mathbf{z}_{1:T}|\\mathbf{x}_{1:T})\\). We can also compute \\(p(\\mathbf{x}_{1:T})\\) by summing up over all hidden paths. This is useful for classification tasks. Evaluation We start by solving the first problem posited by (RABINER 1989).\nGiven an observation sequence and model parameters, how do we compute the probability of the observation sequence given the parameters? That is, given some model parameters \\(\\lambda = (A, B, \\pi)\\), compute \\(p(z_t|\\mathbf{x}_{1:t})\\).\nForwards Pass The forwards algorithm solves two problems of interest. First, we want to know how well our current parameters explain the observation sequence. That is, \\(p(\\mathbf{x}_{1:T}|\\lambda)\\).\nSecond, we want to compute \\(p(z_t | \\mathbf{x}_{1:t})\\). To compute these in an efficient way, a recursive strategy is adopted. Let the forward variable \\(\\alpha_t(i)\\) be defined as\n\\[ \\alpha_t(i) = p(\\mathbf{x}_{1:t}, z_t = i | \\lambda). \\]\nThe forwards algorithm is defined as 3 steps.\nInitialization:\n\\[ \\alpha_1(i) = \\pi_i b_i(\\mathbf{x}_1),\\quad 1 \\leq i \\leq N. \\]\nRecursion:\n\\[ \\alpha_{t+1}(j) = \\Big(\\sum_{i=1}^N \\alpha_t(i)a_{ij}\\Big)b_j(\\mathbf{x}_{t+1}),\\quad 1 \\leq t \\leq T - 1,\\quad 1 \\leq j \\leq N \\]\nTermination:\n\\[ p(\\mathbf{x}_{1:T}) = \\sum_{i=1}^N \\alpha_T(i). \\]\nThe recursive step is visualized as a lattice structure as seen below.\nFigure 3: From Rabiner 1989. With this step, we have a solution for the first problem. We can now calculate more efficiently the probability of our observations given the current model parameters. This along with the following backwards pass will be essential for updating our model parameters.\nThe forwards algorithm is also used to solve the filtering problem. To see how, consider \\(p(z_t | \\mathbf{x}_{1:t-1})\\) right before time \\(t\\).\n\\begin{equation*} p(z_t=j|\\mathbf{x}_{1:t-1}) = \\sum_i p(z_t=j|z_{t-1}=i)p(z_{t-1}=i|\\mathbf{x}_{1:t-1}) \\end{equation*}\nWhen we update for time \\(t\\), we have that\n\\begin{align*} p(z_t=j|\\mathbf{x}_{1:t}) \u0026amp;= p(z_t=j|\\mathbf{x}_t, \\mathbf{x}_{1:t})\\\\ \u0026amp;=\\frac{p(\\mathbf{x}_t|z_t=j, \\mathbf{x}_{1:t-1})p(z_t=j|\\mathbf{x}_{1:t-1})}{p(\\mathbf{x}_t|\\mathbf{x}_{t-1})} \\end{align*}\nHowever, \\(\\mathbf{x}_{1:t-1}\\) is conditionally independent given \\(z_t\\), so it becomes\n\\begin{equation*} p(z_t=j|\\mathbf{x}_{1:t})=\\frac{p(\\mathbf{x}_t|z_t=j)p(z_t=j|\\mathbf{x}_{1:t-1})}{p(\\mathbf{x}_t|\\mathbf{x}_{t-1})}. \\end{equation*}\nWriting out \\(p(z_t=j|\\mathbf{x}_{1:t-1})\\) fully yields\n\\begin{equation*} p(z_t=j|\\mathbf{x}_{1:t}) \\propto p(\\mathbf{x}_t|z_t=j)\\sum_i p(z_t=j|z_{t-1}=i)p(z_{t-1}=i|\\mathbf{x}_{1:t-1}). \\end{equation*}\nThis is the recursion step from above!\nThis can also be represented in terms of the \\(\\alpha\\) variables from above. To compute \\(p(z_t=i|\\mathbf{x}_{1:t})\\), we can use the definition of a conditional probability distribution:\n\\begin{align*} p(z_t=i|\\mathbf{x}_{1:t}) \u0026amp;= \\frac{p(z_t=i, \\mathbf{x}_{1:t})}{p(\\mathbf{x}_{1:t})}\\\\ \u0026amp;= \\frac{\\alpha_t(i)}{\\sum_{j=1}^N \\alpha_t(j)} \\end{align*}\nCompared to the complexity of the explicit representation, the forwards pass needs only \\(N^2T\\) calculations. As pointed out in (RABINER 1989), with 5 hidden states and an observation sequence of length 100, the forwards pass only needs around 3000 computations. A direct calculation would require \\(10^{72}\\).\nBackwards Pass When updating the parameters of our model, we will need to consider the entire observation sequence. The forward pass did not require the entire sequence. Instead, we can compute the probability of the observation up to some time \\(t\\). The backwards pass begins by defining the variable\n\\[ \\beta_t(i) = p(\\mathbf{x}_{t+1:T} | z_t = i). \\]\nWe can utilize a recursive process similar to the forwards algorithm with the following steps:\nInitialization:\n\\[ \\beta_T(i) = 1,\\quad 1 \\leq i \\leq N \\]\nRecursion:\n\\[ \\beta_t(i) = \\sum_{j=1}^N a_{ij}b_j(\\mathbf{x}_{t+1})\\beta_{t+1}(j),\\quad t = T-1,\\dots,1,\\quad 1 \\leq i \\leq N. \\]\nTermination:\n\\[ p(\\mathbf{x}_{1:T}) = \\sum_{j=1}^N \\pi_j b_j(x_1) \\beta_1(j) \\]\nThe complexity of the backwards algorithm is similar to that of the forwards: \\(N^2T\\).\nWith both the forward and backwards passes defined, we can compute the smoothing problem:\n\\[ p(z_t=i|\\mathbf{x}_{1:T}) = \\frac{\\alpha_t(i)\\beta_t(i)}{\\sum_{j=1}^N \\alpha_t(j)\\beta_t(j)} \\]\nThe Viterbi Algorithm With problem 1 out of the way, we turn our attention to problem 2.\nGiven an observation sequence and model parameters, how do we choose a state sequence which is optimal? \\[ \\mathbf{z}^* = \\text{arg}\\max_{\\mathbf{z}_{1:T}}p(\\mathbf{z}_{1:T}|\\mathbf{x}_{1:T}) \\]\nWith respect to the lattice diagram, this is equivalent to computing the shortest path. This is accomplished via the Viterbi algorithm, sometimes referred to as the max-sum algorithm. As with the forwards-backwards algorithm, the Viterbi algorithm takes on a recursive approach. It starts by defining an intermediate variable\n\\[ \\gamma_t(i) = p(z_t=i|\\mathbf{x}_{1:T}). \\]\nUsing the variables defined in the forwards-backwards algorithm, this can be expressed as\n\\[ \\gamma_t(i) = \\frac{\\alpha_t(i) \\beta_t(i)}{\\sum_{i=1}^N \\alpha_t(i) \\beta_t(i)}. \\]\nThis \\(\\gamma_t(i)\\), we can compute the most likely state at time \\(t\\):\n\\[ z_t^* = \\text{arg}\\max_{1\\leq i \\leq N} \\gamma_t(i), \\quad 1 \\leq t \\leq T. \\]\nOne problem with this approach alone is that the most likely state at a particular time \\(t\\) may not lead us to the most probable sequence of states. As stated above, we need to maximize \\(p(\\mathbf{z}_{1:T}|\\mathbf{x}_{1:T})\\). In order to tackle this efficiently, Viterbi employs a dynamic programming approach.\nInitialization\nStart with the best initial state out of all states given the observation at \\(t=1\\). Additionally, we want to record the index of each state through time so that the best path can be retraced.\n\\begin{align*} \\delta_1(i) \u0026amp;= \\pi_i b_i(\\mathbf{x}_1),\\quad 1 \\leq i \\leq N\\\\ \\psi_1(i) \u0026amp;= 0 \\end{align*}\nRecursion:\nThe quantity \\(\\delta_t(i)\\) represents the joint probability of state sequences and observations up to time \\(t\\) ending with state \\(z_t=i\\). Thus, the recursive step is to maximize the probability of the intermediate output for \\(t-1\\):\n\\[ \\delta_t(j) = \\max_{1 \\leq i \\leq N} (\\delta_{t-1}(i) a_{ij})b_j(\\mathbf{x}_t), \\quad 2 \\leq t \\leq T,\\quad 1 \\leq j \\leq N. \\]\nThe corresponding index for this step is recorded in the path matrix:\n\\[ \\psi_t(j) = \\text{arg}\\max_{1 \\leq i \\leq N} \\delta_{t-1}(i)a_{ij},\\quad 2 \\leq t \\leq T,\\quad 1 \\leq j \\leq N. \\]\nTermination\nThe last step of the Viterbi algorithm completes the calcuation of the joint probability of state sequences and observations.\n\\[ p^* = \\max_{1 \\leq i \\leq N} \\delta_T(i) \\]\n\\[ \\mathbf{z}_T^* = \\text{arg}\\max_{1 \\leq i \\leq N} \\delta_T(i) \\]\nPath Backtrace\nWith the state sequence matrix recorded along the way, we can retrace it to get the most probable sequence:\n\\[ z_t^* = \\psi_{t+1}(z_{t+1}^*),\\quad t = T-1, \\cdots, 1. \\]\nEstimating Parameters If the hidden states were fully observable, then updating our model parameters would be as straightforward as computing the maximum likelihood estimates for the model parameters \\(\\lambda = (A, B, \\pi)\\). For \\(A\\) and \\(\\pi\\), we first tally up the following counts:\n\\[ \\hat{a}_{ij} = \\frac{N_{ij}}{\\sum_j N_{ij}}, \\]\nthe number of times we expect to transition from \\(i\\) to \\(j\\) divided by the number of times we transition from \\(i\\) to any other state.\nFor \\(\\pi\\), we have\n\\[ \\hat{\\pi_i} = \\frac{N_i}{\\sum_i N_i}, \\]\nThe number of times we expect to start in state \\(i\\) divided by the number of times we start in any other state.\nEstimating the parameters for \\(B\\) depends on which distribution we are using for our observation probabilities. For a multinomial distribution, we would compute the number of times we are in state \\(j\\) and observe a symbol \\(k\\) divided by the number of times we are in state \\(j\\):\n\\[ \\hat{B}_{jk} = \\frac{N_{jk}}{N_k}, \\]\nwhere\n\\[ N_{jk} = \\sum_{i=1}^N \\sum_{t=1}^T \\mathbb{1} (z_{i, t}=j, x_{i, t}=k). \\]\nIf the observation probability follows a Gaussian distribution, the MLEs for \\(\\mu\\) and \\(\\mathbf{\\Sigma}\\) are\n\\[ \\hat{\\mathbf{\\mu}}_k = \\frac{\\bar{\\mathbf{x}}_k}{N_k},\\quad \\hat{\\mathbf{\\Sigma}}_k = \\frac{(\\bar{\\mathbf{x}}\\bar{\\mathbf{x}})_k^T - N_k \\hat{\\mathbf{\\mu}}_k\\hat{\\mathbf{\\mu}}_k^T}{N_k}, \\]\nwhere\n\\[ \\bar{\\mathbf{x}}_k = \\sum_{i=1}^N \\sum_{t=1}^T \\mathbb{1}(z_{i, t}=k)\\mathbf{x}_{i, t} \\]\nand\n\\[ (\\bar{\\mathbf{x}}\\bar{\\mathbf{x}})_k^T) = \\sum_{i=1}^N \\sum_{t=1}^T \\mathbb{1} (z_{i, t}=k)\\mathbf{x}_{i,k}\\mathbf{x}_{i,k}^T. \\]\nExpectation Maximization Of course, HMMs have hidden states which are not fully observable. Thus, we need to come up with another strategy for updating our parameters based on the observable data. The intuition behind this approach is as follows. We first start out by using our current parameters to estimate the missing data, making it complete. Initially, we may randomize our estimates if we have no good heuristic or guess as to what they should be.\nWith the completed data, we can update our current parameters. In other words, the expected values of the sufficient statistics can be derived now that the data has been filled in. A new set of parameters is found such that it maximizes the likelihood function with respect to the estimated data.\nE Step Following (RABINER 1989), we start with the joint probability of being in state \\(i\\) at time \\(t\\) and state \\(j\\) at time \\(t+1\\):\n\\[ \\xi_t(i, j) = p(z_t = i, z_{t+1} = j|\\mathbf{x}_{1:T}). \\]\nThis can be computed using the forwards-backwards algorithm:\n\\[ \\xi_t(i, j) = \\frac{\\alpha_t(i)a_{ij}b_j(\\mathbf{x}_{t+1})\\beta_{t+1}(j)}{\\sum_{i=1}^N \\sum_{j=1}^N \\alpha_t(i)a_{ij}b_j(\\mathbf{x}_{t+1})\\beta_{t+1}(j)}. \\]\nThis can be related back to \\(\\gamma_t(i)\\) by summing over over \\(j\\):\n\\[ \\gamma_t(i) = \\sum_{j=1}^N \\xi_t(i, j). \\]\nHere, \\(\\gamma_t(i)\\) is the expected number of times we transition from \\(z = i\\). Summing over all \\(t\\) yields the expected transitions from \\(z_i\\) over all time steps:\n\\[ \\sum_{t=1}^{T-1} \\gamma_t(i). \\]\nSince \\(\\xi_t(i, j)\\) is the expected transition from \\(i\\) to \\(j\\) at time \\(t\\), we can compute the total number of transitions from \\(i\\) to \\(j\\) via\n\\[ \\sum_{t=1}^{T-1} \\xi_t(i, j). \\]\nM Step The previous E Step computed the expected values given the current parameter estimates. Now that the data is complete, we can update our parameter estimates. Starting with the transition probabilities, we must add the expected number of transitions from \\(i\\) to \\(j\\) and divide by the expected number of times we transition from \\(i\\). Using the parameters from the E Step, this can be written\n\\[ \\hat{a}_{ij} = \\frac{\\sum_{t=1}^{T-1}\\xi_t(i, j)}{\\sum_{t=1}^{T-1}\\gamma_t(i)}. \\]\nThe initial state probability at \\(t=1\\) is the number of times we expect to be in state \\(z=i\\) at \\(t=1\\):\n\\[ \\gamma_1(i). \\]\nFinally, the observation probability parameters are updated by considering the number of times we are in state \\(z=j\\) and observing \\(x=k\\) divided by the number of times we are in state \\(z=j\\). Note that this is for a multinomial probabiliy distribution:\n\\[ \\hat{b}_j(k) = \\frac{\\sum_{t=1, x_t = k}^T \\gamma_t(j)}{\\sum_{t=1}^T \\gamma_t(j)}. \\]\nThese formulas are derived from maximizing Baum\u0026rsquo;s auxiliary function\n\\[ Q(\\lambda, \\hat{\\lambda}) = \\sum_{Q} p(\\mathbf{z}|\\mathbf{x}, \\lambda) \\log p(\\mathbf{x}, \\mathbf{z}|\\hat{\\lambda}) \\]\nover \\(\\hat{\\lambda}\\). It has further been shown that maximizing this function leads to increased likelihood:\n\\[ \\max_{\\hat{\\lambda}} Q(\\lambda, \\hat{\\lambda}) \\implies p(\\mathbf{x}|\\hat{\\lambda}) \\geq p(\\mathbf{x}|\\lambda). \\]\nIf we have a Gaussian observation model, the values for \\(\\hat{b}_j(k)\\) are computed to accommodate the parameters of the distribution. These parameter estimates assume a Gaussian mixture model. Starting with \\(\\hat{\\mu}_{jk}\\), it can be estimated by dividing the expected value of observations belonging to Gaussian density \\(k\\) by the expected number of times we are in state \\(j\\) using the \\(k^{\\text{th}}\\) mixture component:\n\\[ \\hat{\\mathbf{\\mu}}_{jk} = \\frac{\\sum_{t=1}^T \\gamma_t(j, k)\\mathbf{x}_t}{\\sum_{t=1}^T \\gamma_t(j, k)}. \\]\nHere, \\(\\gamma_t(j, k)\\) is the probability of being in state \\(j\\) at time \\(t\\) with the \\(k^{\\text{th}}\\) mixture component accounting for \\(\\mathbf{x}_t\\):\n\\[ \\gamma_t(j, k) = \\frac{\\alpha_t(j)\\beta_t(j)}{\\sum_{j=1}^N \\alpha_t(j) \\beta_t(j)} \\frac{c_{jk}\\mathcal{N}(\\mathbf{x}_t, \\mu_{jk}, \\mathbf{\\Sigma}_{jk})}{\\sum_{m=1}^M c_{jm}\\mathcal{N}(\\mathbf{x}_t, \\mu_{jm}, \\mathbf{\\Sigma}_{jm})}. \\]\nThis method is proven to improve the parameters.\nEach iteration is guaranteed to improve the log-likelihood function. The process is guaranteed to converge. The convergence point is a fixed point of the likelihood function. These guarantees are similar to gradient ascent.\nReferences RABINER, LAWRENCE R. 1989. “A Tutorial on Hidden Markov Models and Selected Applications in Speech Recognition.” Proceedings of the Ieee 77 (2): 30. ","date":1645509600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1689379200,"objectID":"24afc41ee651bea868216ff2c5e1f084","permalink":"https://ajdillhoff.github.io/notes/hidden_markov_models/","publishdate":"2022-02-22T00:00:00-06:00","relpermalink":"/notes/hidden_markov_models/","section":"notes","summary":"Table of Contents Introduction The Markov Assumption Definition Evaluation The Viterbi Algorithm Estimating Parameters Expectation Maximization Introduction This article is essentially a grok of a tutorial on HMMs by (RABINER 1989). It will be useful for the reader to reference the original paper.\nUp to this point, we have only explored \u0026ldquo;atomic\u0026rdquo; data points. That is, all of the information about a particular sample is encapsulated into one vector. Sequential data is easily represented by graphical models.","tags":["machine learning","graphical models"],"title":"Hidden Markov Models","type":"notes"},{"authors":["Alex Dillhoff"],"categories":null,"content":"Introduction Let\u0026rsquo;s take a simple constrained problem (from Nocedal and Wright).\n\\begin{align*} \\min \\quad \u0026amp; x_1 + x_2\\\\ \\textrm{s.t.} \\quad \u0026amp; x_1^2 + x_2^2 - 2 = 0 \\end{align*}\nThe set of possible solutions to this problem lie on the boundary of the circle defined by the constraint:\nFigure 1: Source: Nocedal and Wright If we let \\(g(\\mathbf{x}) = x_1^2 + x_2^2 - 2\\), then the gradient vector is \\((2x_1, 2x_2)\\)\nOur original function \\(f(\\mathbf{x}) = x_1 + x_2\\) has a gradient vector of \\((1, 1)\\).\nThe figure above visualizes these vectors at different points on the constraint boundary.\nNotice that the optimal solution \\(\\mathbf{x}^* = (-1, -1)\\) is at a point where \\(\\nabla g(\\mathbf{x}^*)\\) is parallel to \\(\\nabla f(\\mathbf{x}^*)\\). However, the gradients of the vectors are not equal. So there must be some scalar \\(\\lambda\\) such that \\(\\nabla f(\\mathbf{x}^*) = \\lambda \\nabla g(\\mathbf{x}^*)\\).\nThis scalar \\(\\lambda\\) is called a Lagrangian multiplier. We use this and introduce the Lagrangian function:\n\\begin{equation*} \\mathcal{L}(\\mathbf{x}, \\lambda) = f(\\mathbf{x}) - \\lambda g(\\mathbf{x}) \\end{equation*}\nThis yields a form for which we can analytically calculate the stationary points. That is,\n\\begin{equation*} \\nabla_{\\mathbf{x}} \\mathcal{L}(\\mathbf{x}^*, \\lambda^*) = 0. \\end{equation*}\nLagrangian Duality In general, the primal optimization problem is formulated as\n\\begin{align*} \\min_{w} \\quad \u0026amp; f(w)\\\\ \\textrm{s.t.} \\quad \u0026amp; g_i(w) \\leq 0, \\quad i = 1, \\dots, k\\\\ \u0026amp; h_i(w) = 0, \\quad i = 1, \\dots, l. \\end{align*}\nThe Lagrangian function is then\n\\[ L(w, \\alpha, \\beta) = f(w) + \\sum_{i=1}^k\\alpha_i g_i(w) + \\sum_{i=1}^l \\beta_i h_i(w). \\]\nAdditional Resources https://cs229.stanford.edu/notes2021fall/cs229-notes3.pdf ","date":1644040800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1644040800,"objectID":"07ec05c44fcee043ca37fbb243255816","permalink":"https://ajdillhoff.github.io/notes/lagrangian_multipliers/","publishdate":"2022-02-05T00:00:00-06:00","relpermalink":"/notes/lagrangian_multipliers/","section":"notes","summary":"Introduction Let\u0026rsquo;s take a simple constrained problem (from Nocedal and Wright).\n\\begin{align*} \\min \\quad \u0026amp; x_1 + x_2\\\\ \\textrm{s.t.} \\quad \u0026amp; x_1^2 + x_2^2 - 2 = 0 \\end{align*}\nThe set of possible solutions to this problem lie on the boundary of the circle defined by the constraint:\nFigure 1: Source: Nocedal and Wright If we let \\(g(\\mathbf{x}) = x_1^2 + x_2^2 - 2\\), then the gradient vector is \\((2x_1, 2x_2)\\)","tags":null,"title":"Lagrangian Multipliers","type":"notes"},{"authors":["Alex Dillhoff"],"categories":null,"content":" Table of Contents Introduction Dual Representation Relating Back to the Original Formulation Types of Kernels Introduction Notebook link: https://github.com/ajdillhoff/CSE6363/blob/main/svm/kernels.ipynb\nParametric models use training data to estimate a set of parameters that can then be used to perform inference on new data. An alternative approach uses nonparametric methods, meaning the function is estimated directly from the data instead of optimizing a set of parameters.\nOne possible downside to such an approach is that it becomes less efficient as the amount of training data increases. Additionally, the transformation into a feature space such that the data becomes linearly separable may be intractable. Consider sequential data such as text or audio. If each sample has a variable number of features, how do we account for this using standard linear models with a fixed number of parameters?\nThe situations described above can be overcome through the use of the kernel trick. We will see that, by computing a measure of similarity between samples in the feature space, we do not need to directly transform each individual sample to that space.\nA kernel function is defined as\n\\[ k(\\mathbf{x}, \\mathbf{x}\u0026rsquo;) = \\phi(\\mathbf{x})^T \\phi(\\mathbf{x}\u0026rsquo;), \\]\nwhere \\(\\phi\\) is some function which transforms the input to a feature space.\nMethods that require part or all of the training data to make prediction will benefit from using kernel representations, especially when using high dimensional data. Instead of transforming the data into a high dimensional space which may be computationally intractable, a measure of similarity via the inner product is used. The inner product is not the projection into some space. Instead, it represents the outcome of that projection.\nDual Representation The key to taking advantage of the kernel trick relies on reformulating our linear model into a dual representation. In this form, we will establish a dependence on the kernel function.\nThe following derivation of the dual representation for linear regression follows (Bishop). Consider the least squares loss with \\(L2\\) regularization, as we discussed with Linear Regression.\n\\[ J(\\mathbf{w}) = \\frac{1}{2}\\sum_{i=1}^n(\\mathbf{w}^T\\phi(\\mathbf{x}_i) - y_i)^2 + \\frac{\\lambda}{2} \\mathbf{w}^T \\mathbf{w} \\]\nHere, \\(\\phi\\) is a basis function that transforms the input. This could also be a simple identity function in which \\(\\phi(\\mathbf{x}) = \\mathbf{x}\\). To solve for \\(\\mathbf{w}\\), we take the gradient of \\(J(\\mathbf{w})\\) with respect to \\(\\mathbf{w}\\) and set it to 0.\n\\begin{align*} \\nabla_{\\mathbf{w}}J(\\mathbf{w}) \u0026amp;= \\sum_{i=1}^n(\\mathbf{w}^T\\phi(\\mathbf{x}_i) - y_i)\\phi(\\mathbf{x}_i) + \\lambda \\mathbf{w}\\\\ \\implies \\mathbf{w} \u0026amp;= -\\frac{1}{\\lambda}\\sum_{i=1}^n(\\mathbf{w}^T\\phi(\\mathbf{x}_i) - y_i)\\phi(\\mathbf{x}_i) \\end{align*}\nWe can formulate this as a matrix-vector product by letting\n\\begin{equation*} \\mathbf{\\Phi} = \\begin{bmatrix} \\phi(\\mathbf{x}_1)^T\\\\ \\vdots \\\\ \\phi(\\mathbf{x}_n)^T\\\\ \\end{bmatrix} \\text{ and } a_{i} = -\\frac{1}{\\lambda}(\\mathbf{w}^T\\phi(\\mathbf{x}_i) - y_i). \\end{equation*}\nThen, \\(\\mathbf{w} = \\mathbf{\\Phi}^T\\mathbf{a}\\), where \\(\\mathbf{a} = [a_1, \\dots, a_n]^T\\).\nThe dual representation is derived by reformulating \\(J(\\mathbf{w})\\) in terms of \\(\\mathbf{a}\\).\n\\begin{equation*} J(\\mathbf{a}) = \\frac{1}{2}\\mathbf{a}^T\\mathbf{\\Phi}\\mathbf{\\Phi}^T\\mathbf{\\Phi}\\mathbf{\\Phi}^T\\mathbf{a} - \\mathbf{a}^T\\mathbf{\\Phi}\\mathbf{\\Phi}^T\\mathbf{y} + \\frac{1}{2}\\mathbf{y}^T\\mathbf{y} + \\frac{\\lambda}{2} \\mathbf{a}^T\\mathbf{\\Phi}\\mathbf{\\Phi}^T\\mathbf{a}, \\end{equation*}\nwhere \\(\\mathbf{y} = [y_1, \\dots, y_n]\\).\nLooking at the products \\(\\mathbf{\\Phi}\\mathbf{\\Phi}^T\\), we see that these relate to our original kernel form: \\(\\phi(\\mathbf{x}_i)^T\\phi(\\mathbf{x}_j)\\). This product defines a Gram matrix \\(\\mathbf{K} = \\mathbf{\\Phi}\\mathbf{\\Phi}^T\\) whose elements are \\(k(\\mathbf{x}_i, \\mathbf{x}_j)\\). Thus, we can rewrite \\(J(\\mathbf{a})\\) as\n\\begin{equation*} J(\\mathbf{a}) = \\frac{1}{2}\\mathbf{a}^T\\mathbf{K}\\mathbf{K}\\mathbf{a} - \\mathbf{a}^T\\mathbf{K}\\mathbf{y} + \\frac{1}{2}\\mathbf{y}^T\\mathbf{y} + \\frac{\\lambda}{2}\\mathbf{a}^T\\mathbf{K}\\mathbf{a}. \\end{equation*}\nSolving for \\(\\mathbf{a}\\) can be done by computing the gradient of \\(J(\\mathbf{a})\\) with respect to \\(\\mathbf{a}\\) and setting the result to 0.\n\\begin{align*} \\nabla_\\mathbf{a}J(\\mathbf{a}) = \\mathbf{K}\\mathbf{K}\\mathbf{a} - \\mathbf{K}\\mathbf{y} + \\lambda \\mathbf{K}\\mathbf{a} \u0026amp;= 0\\\\ \\mathbf{K}\\mathbf{a} + \\lambda I\\mathbf{a} - \\mathbf{y} \u0026amp;= 0\\\\ (\\mathbf{K} + \\lambda I)\\mathbf{a} \u0026amp;= \\mathbf{y}\\\\ \\mathbf{a} \u0026amp;= (\\mathbf{K} + \\lambda I)^{-1} \\mathbf{y}. \\end{align*}\nWith \\(\\mathbf{a}\\) solved, we can complete the dual representation of our original linear regression model. Recall that\n\\begin{equation*} h(\\mathbf{x}; \\mathbf{w}) = \\mathbf{w}^T\\phi(\\mathbf{x}). \\end{equation*}\nIf we substitute \\(\\mathbf{w} = \\mathbf{\\Phi}^T\\mathbf{a}\\), we get\n\\begin{align*} f(\\mathbf{x};\\mathbf{a}) \u0026amp;= \\mathbf{a}^T\\mathbf{\\Phi}\\phi(\\mathbf{x})\\\\ \u0026amp;= \\Big[(\\mathbf{K} + \\lambda I)^{-1}\\mathbf{y})\\Big]^T\\mathbf{\\Phi}\\phi(\\mathbf{x}). \\end{align*}\nAgain, the kernel form is apparent in the product \\(\\mathbf{\\Phi}\\phi(\\mathbf{x})\\). If we let \\(k_i(\\mathbf{x}) = k(\\mathbf{x}_i,\\mathbf{x})\\) and\n\\begin{equation*} \\mathbf{k}(\\mathbf{x}) = \\begin{bmatrix} k_1(\\mathbf{x})\\\\ \\vdots \\\\ k_n(\\mathbf{x}) \\end{bmatrix}, \\end{equation*}\nwe can write the dual representation of our linear regression model as\n\\begin{equation*} f(\\mathbf{x}) = \\mathbf{k}(\\mathbf{x})^T(\\mathbf{K} + \\lambda \\mathbf{I})^{-1}\\mathbf{y}. \\end{equation*}\nRelating Back to the Original Formulation In this dual formulation, the solution for \\(\\mathbf{a}\\) can be expressed as a linear combination of elements \\(\\phi(\\mathbf{x})\\). From above, we see that\n\\[ a_i = -\\frac{1}{\\lambda}\\big(\\mathbf{w}^T\\phi(\\mathbf{x}_i) - y_i\\big). \\]\nExpanding this into individual coefficients yields\n\\begin{align*} a_i \u0026amp;= -\\frac{1}{\\lambda}\\big(w_1\\phi_1(\\mathbf{x}_i) + \\cdots + w_m \\phi_m(\\mathbf{x}_i) - y_i\\big)\\\\ \u0026amp;= -\\frac{w_1}{\\lambda}\\phi_1(\\mathbf{x}_i) - \\cdots - \\frac{w_m}{\\lambda} \\phi_m(\\mathbf{x}_i) + \\frac{y_i}{\\lambda}. \\end{align*}\nWe are close, but we still need to do something about the term \\(\\frac{y_i}{\\lambda}\\). For this, we can multiply both sides of our equation by a convenient 1. That is, we multiply by\n\\[ \\frac{\\phi_1(\\mathbf{x}_i) + \\cdots + \\phi_m(\\mathbf{x}_i)}{\\phi_1(\\mathbf{x}_i) + \\cdots + \\phi_m(\\mathbf{x}_i)}. \\]\nBy doing this and grouping the \\(\\phi_j\\) terms, we get\n\\begin{align*} \u0026amp;\\Big(\\frac{y_i}{\\lambda}\\cdot \\frac{1}{\\phi_1(\\mathbf{x}_i) + \\cdots + \\phi_m(\\mathbf{x}_i)} - \\frac{w_1}{\\lambda}\\Big)\\phi_1(\\mathbf{x}_i) + \\cdots\\\\ \u0026amp;+ \\Big(\\frac{y_i}{\\lambda}\\cdot \\frac{1}{\\phi_1(\\mathbf{x}_i) + \\cdots + \\phi_m(\\mathbf{x}_i)} - \\frac{w_m}{\\lambda}\\Big)\\phi_m(\\mathbf{x}_i). \\end{align*}\nWe can simplify this by introducing a term\n\\[ c_i = \\frac{y_i}{\\lambda}\\cdot \\frac{1}{\\phi_1(\\mathbf{x}_i) + \\cdots + \\phi_m(\\mathbf{x}_i)}. \\]\nThen the solution can be rewritten as\n\\[ \\Big(c_i - \\frac{w_1}{\\lambda}\\Big)\\phi_1(\\mathbf{x}_i) + \\cdots + \\Big(c_i - \\frac{w_m}{\\lambda}\\Big)\\phi_m(\\mathbf{x}_i). \\]\nWith this, we can step backwards using intermediate results in the previous section to get back to the original formulation of our linear regression model.\nTypes of Kernels There are several types of kernels that can be used to transform the input data depending on the problem. The simplest kernel is the identity kernel:\n\\[ k(\\mathbf{x}, \\mathbf{x\u0026rsquo;}) = \\mathbf{x}^T \\mathbf{x\u0026rsquo;}. \\]\nPolynomial Kernel A polynomial kernel is defined as\n\\[ k(\\mathbf{x}, \\mathbf{x\u0026rsquo;}) = (\\mathbf{x}^T\\mathbf{x\u0026rsquo;}+c)^d. \\]\nThis is a common choice for solving problems akin to polynomial regression. We can use this kernel to present a visual explanation of kernel functions. Consider the following dataset.\nFigure 1: Binary classification dataset that is not linearly separable. It is easy enough to see that this dataset could not be separated using a hyperplane in 2D. We could separate the two using some nonlinear decision boundary like a circle. If we could transform this into 3D space, we could come up with some features such that it is linearly separable in 3D. For example, let \\(\\phi(\\mathbf{x}) = (x_1^2, x_2^2, \\sqrt{2}x_1x_2)\\).\nTransforming all points and visualizing yields the figure below.\nFigure 2: Binary classification dataset transformed into a 3D feature space. From this perspective, we can clearly see that the data is linearly separable. The question remains: if we only have the original 2D features, how do we compare points in this 3D features space without explicitly transforming each point? The kernel function corresponding to the feature transform above is\n\\begin{align*} k(\\mathbf{x}, \\mathbf{x}\u0026rsquo;) \u0026amp;= (\\mathbf{x}^T\\mathbf{x}\u0026rsquo;)^2\\\\ \u0026amp;= (x_1x\u0026rsquo;_1 + x_2x\u0026rsquo;_2)^2\\\\ \u0026amp;= 2x_1x\u0026rsquo;_1x_2x\u0026rsquo;_2 + (x_1x\u0026rsquo;_1)^2 + (x_2x\u0026rsquo;_2)^2\\\\ \u0026amp;= \\phi(\\mathbf{x})^T \\phi(\\mathbf{x}\u0026rsquo;) \\end{align*}\nwhere\n\\[ \\phi(\\mathbf{x}) = \\begin{bmatrix} \\sqrt{2}x_1x_2\\\\ x_1^2\\\\ x_2^2 \\end{bmatrix}. \\]\nRadial Basis Function Kernel This kernel follows a Gaussian term and is commonly used with SVMs. It is defined as\n\\[ k(\\mathbf{x}, \\mathbf{x\u0026rsquo;}) = \\exp\\Big(-\\frac{\\|\\mathbf{x}-\\mathbf{x\u0026rsquo;}\\|^2}{2\\sigma^2}\\Big). \\]\nCosine Similarity Consider the problem of comparing text sequences for a document classification task. One approach is to compare the number of occurrences of each word. The idea is that documents that are similar will have a similar number of words that occur.\n\\[ k(\\mathbf{x}, \\mathbf{x}\u0026rsquo;) = \\frac{\\mathbf{x}^T \\mathbf{x}\u0026rsquo;}{\\|\\mathbf{x}\\|_2 \\|\\mathbf{x}\u0026rsquo;\\|_2} \\]\nDocuments that are orthogonal, in the sense that the resulting cosine similarity is 0, are dissimilar. The similarity increases as the score approaches 1. There are several issues with this approach which are addressed by using the term frequence-inverse document frequency (TF-IDF) score.\n","date":1642831200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1642831200,"objectID":"83e1acfd29cf0148a76ae1f5d8926675","permalink":"https://ajdillhoff.github.io/notes/kernels/","publishdate":"2022-01-22T00:00:00-06:00","relpermalink":"/notes/kernels/","section":"notes","summary":"Table of Contents Introduction Dual Representation Relating Back to the Original Formulation Types of Kernels Introduction Notebook link: https://github.com/ajdillhoff/CSE6363/blob/main/svm/kernels.ipynb\nParametric models use training data to estimate a set of parameters that can then be used to perform inference on new data. An alternative approach uses nonparametric methods, meaning the function is estimated directly from the data instead of optimizing a set of parameters.\nOne possible downside to such an approach is that it becomes less efficient as the amount of training data increases.","tags":["machine learning"],"title":"Kernels","type":"notes"},{"authors":["Alex Dillhoff"],"categories":null,"content":" Table of Contents Introduction Gaussian Class Conditional Densities Maximum Likelihood Estimation Example Introduction This section covers classification from a probabilistic perspective. The discriminative approach involves a parameterized function which assigns each input vector \\(\\mathbf{x}\\) to a specific class. We will see that modeling the conditional probability distribution \\(p(C_k|\\mathbf{x})\\) grants us additional benefits while still fulfilling our original classification task.\nLet\u0026rsquo;s begin with a 2 class problem. To classify this with a generative model, we use the class-conditional densities \\(p(\\mathbf{x}|C_i)\\) and class priors \\(p(C_i)\\). The posterior probability for \\(C_1\\) can be written in the form of a sigmoid function:\n\\begin{align*} p(C_1|\\mathbf{x}) \u0026amp;= \\frac{p(\\mathbf{x}|C_1)p(C_1)}{p(\\mathbf{x}|C_1)p(C_1) + p(\\mathbf{x}|C_2)p(C_2)} \\end{align*}\nThen multiply the numerator and denominator by\n\\begin{equation*} \\frac{(p(\\mathbf{x}|C_1))^{-1}}{(p(\\mathbf{x}|C_1))^{-1}}, \\end{equation*}\nwhich yields\n\\begin{equation*} \\frac{1}{1 + \\frac{p(\\mathbf{x}|C_2)p(C_2)}{p(\\mathbf{x}|C_1)p(C_1)}}. \\end{equation*}\nNoting that \\(a = \\exp(\\ln(a))\\), we can rewrite further\n\\begin{equation*} \\frac{1}{1 + \\exp(-a)}, \\end{equation*}\nwhere \\(a = \\ln \\frac{p(\\mathbf{x}|C_1)p(C_1)}{p(\\mathbf{x}|C_2)p(C_2)}\\).\nWriting this distribution in the form of the sigmoid function is convenient as it is a natural choice for many other classification models. It also has a very simple derivative which is convenient for models optimized using gradient descent.\nGiven certain choices for the class conditional densities, the posterior probabilty distribution will be a linear function of the input features:\n\\begin{equation*} \\ln p(C_k|\\mathbf{x};\\theta) = \\mathbf{w}^T \\mathbf{x} + c, \\end{equation*}\nwhere \\(\\mathbf{w}\\) is a parameter vector based on the parameters of the chosen probability distribution, and \\(c\\) is a constant term that is not dependent on the parameters. As we will see, the resulting model will take an equivalent form to the discriminative approach.\nGaussian Class Conditional Densities Let\u0026rsquo;s assume that our class conditional densities \\(p(\\mathbf{x}|C_k)\\) are Gaussian. We will additionally assume that the covariance matrices between classes are shared. This will result in linear decision boundaries. Since the conditional densities are chosen to be Gaussian, the posterior is given by\n\\begin{equation*} p(C_k|\\mathbf{x};\\theta) \\propto \\pi_k\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu}_c,\\Sigma), \\end{equation*}\nwhere \\(\\pi_k\\) is the prior probability of class \\(k\\). We choose to ignore the normalizing constant since it is not dependent on the class.\nThe class conditional density function for class \\(k\\) is given by\n\\begin{equation*} p(\\mathbf{x}|C_k;\\theta) = \\frac{1}{2\\pi^{D/2}}\\frac{1}{|\\Sigma|^{1/2}}\\exp\\Big(-\\frac{1}{2}(\\mathbf{x} - \\mathbf{\\mu}_k)^T \\Sigma^{-1} (\\mathbf{x} - \\mathbf{\\mu}_k)\\Big). \\end{equation*}\nNow that we have a concrete function to work with, let\u0026rsquo;s go back to the simple case of two classes and define \\(a = \\ln \\frac{p(\\mathbf{x}|C_1)p(C_1)}{p(\\mathbf{x}|C_2)p(C_2)}\\). First, we rewrite \\(a\\):\n\\begin{equation*} a = \\ln p(\\mathbf{x}|C_1) - \\ln p(\\mathbf{x}|C_2) + \\ln \\frac{p(C_1)}{p(C_2)}. \\end{equation*}\nThe log of the class conditional density for a Gaussian is\n\\begin{equation*} \\ln p(\\mathbf{x}|C_k;\\mathbf{\\mu}_k,\\Sigma) = -\\frac{D}{2}\\ln(2\\pi) - \\frac{1}{2}\\ln|\\Sigma|-\\frac{1}{2}(\\mathbf{x}-\\mathbf{\\mu}_k)^T \\Sigma^{-1} (\\mathbf{x}-\\mathbf{\\mu}_k). \\end{equation*}\nTo simplify the above result, we will group the terms that are not dependent on the class parameters since they are consant:\n\\begin{equation*} \\ln p(\\mathbf{x}|C_k;\\mathbf{\\mu}_k,\\Sigma) = -\\frac{1}{2}(\\mathbf{x}-\\mathbf{\\mu}_k)^T \\Sigma^{-1} (\\mathbf{x}-\\mathbf{\\mu}_k) + c. \\end{equation*}\nObserving that this quantity takes on a quadratic form, we can rewrite the above as\n\\begin{equation*} \\ln p(\\mathbf{x}|C_k;\\mathbf{\\mu}_k,\\Sigma) = -\\frac{1}{2}\\mathbf{\\mu}_k\\Sigma^{-1}\\mathbf{\\mu}_k + \\mathbf{x}^T \\Sigma^{-1} \\mathbf{\\mu}_k -\\frac{1}{2}\\mathbf{x}^T \\Sigma^{-1}\\mathbf{x} + c. \\end{equation*}\nUsing this, we complete the definition of \\(a\\):\n\\begin{align*} a \u0026amp;= \\ln p(\\mathbf{x}|C_1) - \\ln p(\\mathbf{x}|C_2) + \\ln \\frac{p(C_1)}{p(C_2)}\\\\ \u0026amp;= -\\frac{1}{2}\\mathbf{\\mu}_1\\Sigma^{-1}\\mathbf{\\mu}_1 + \\mathbf{x}^T \\Sigma^{-1} \\mathbf{\\mu}_1 + \\frac{1}{2}\\mathbf{\\mu}_2\\Sigma^{-1}\\mathbf{\\mu}_2 - \\mathbf{x}^T \\Sigma^{-1} \\mathbf{\\mu}_2 + \\ln \\frac{p(C_1)}{p(C_2)}\\\\ \u0026amp;= \\mathbf{x}^T(\\Sigma^{-1}(\\mathbf{\\mu}_1 - \\mathbf{\\mu}_2)) - \\frac{1}{2}\\mathbf{\\mu}_1\\Sigma^{-1}\\mathbf{\\mu}_1 + \\frac{1}{2}\\mathbf{\\mu}_2\\Sigma^{-1}\\mathbf{\\mu}_2 + \\ln \\frac{p(C_1)}{p(C_2)}\\\\ \u0026amp;= (\\Sigma^{-1}(\\mathbf{\\mu}_1 - \\mathbf{\\mu}_2))^T \\mathbf{x} - \\frac{1}{2}\\mathbf{\\mu}_1\\Sigma^{-1}\\mathbf{\\mu}_1 + \\frac{1}{2}\\mathbf{\\mu}_2\\Sigma^{-1}\\mathbf{\\mu}_2 + \\ln \\frac{p(C_1)}{p(C_2)}. \\end{align*}\nFinally, we define\n\\begin{equation*} \\mathbf{w} = \\Sigma^{-1}(\\mathbf{\\mu}_1 - \\mathbf{\\mu}_2) \\end{equation*}\nand\n\\begin{equation*} w_0 = - \\frac{1}{2}\\mathbf{\\mu}_1\\Sigma^{-1}\\mathbf{\\mu}_1 - \\frac{1}{2}\\mathbf{\\mu}_2\\Sigma^{-1}\\mathbf{\\mu}_2 + \\ln \\frac{p(C_1)}{p(C_2)}. \\end{equation*}\nThus, our posterior takes on the form\n\\begin{equation*} p(C_1|\\mathbf{x};\\theta) = \\sigma(\\mathbf{w}^T \\mathbf{x} + w_0). \\end{equation*}\nMultiple Classes What if we have more than 2 classes? Recall that a generative classifier is modeled as\n\\[ p(C_k|\\mathbf{x};\\mathbf{\\theta}) = \\frac{p(C_k|\\mathbf{\\theta})p(\\mathbf{x}|C_k, \\mathbf{\\theta})}{\\sum_{k\u0026rsquo;}p(C_{k\u0026rsquo;}|\\mathbf{\\theta})p(\\mathbf{x}|C_{k\u0026rsquo;}, \\mathbf{\\theta})}. \\]\nAs stated above, \\(\\mathbf{\\pi}_k = p(C_k|\\mathbf{\\theta})\\) and \\(p(\\mathbf{x}|C_k,\\mathbf{\\theta}) = \\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu}_c,\\Sigma)\\).\nFor LDA, the covariance matrices are shared across all classes. This permits a simplification of the class posterior distribution \\(p(C_k|\\mathbf{x};\\mathbf{\\theta})\\):\n\\begin{align*} p(C_k|\\mathbf{x};\\mathbf{\\theta}) \u0026amp;\\propto \\mathbf{\\pi}_k \\exp\\big(\\mathbf{\\mu}_k^T \\mathbf{\\Sigma}^{-1}\\mathbf{x} - \\frac{1}{2}\\mathbf{x}^T\\mathbf{\\Sigma}^{-1}\\mathbf{x} - \\frac{1}{2}\\mathbf{\\mu}_k\\mathbf{\\Sigma}^{-1}\\mathbf{\\mu}_k\\big)\\\\ \u0026amp;= \\exp\\big(\\mathbf{\\mu}_k^T \\mathbf{\\Sigma}^{-1}\\mathbf{x} - \\frac{1}{2}\\mathbf{\\mu}_k\\mathbf{\\Sigma}^{-1}\\mathbf{\\mu}_k + \\log \\mathbf{\\pi}_k \\big) \\exp\\big(- \\frac{1}{2}\\mathbf{x}^T\\mathbf{\\Sigma}^{-1}\\mathbf{x}\\big). \\end{align*}\nThe term \\(\\exp\\big(- \\frac{1}{2}\\mathbf{x}^T\\mathbf{\\Sigma}^{-1}\\mathbf{x}\\big)\\) is placed aside since it is not dependent on the class \\(k\\). When divided by the sum per the definition of \\(p(C_k|\\mathbf{x};\\mathbf{\\theta})\\), it will equal to 1.\nUnder this formulation, we let\n\\begin{align*} \\mathbf{w}_k \u0026amp;= \\mathbf{\\Sigma}^{-1}\\mathbf{\\mu}_k\\\\ \\mathbf{b}_k \u0026amp;= -\\frac{1}{2}\\mathbf{\\mu}_k^T \\mathbf{\\Sigma}^{-1}\\mathbf{\\mu}_k + \\log \\mathbf{\\pi}_k. \\end{align*}\nThis lets us express \\(p(C_k|\\mathbf{x};\\mathbf{\\theta})\\) as the softmax function:\n\\(p(C_k|\\mathbf{x};\\mathbf{\\theta}) = \\frac{\\exp(\\mathbf{w}_k^T\\mathbf{x}+\\mathbf{b}_k)}{\\sum_{k\u0026rsquo;}\\exp(\\mathbf{w}_{k\u0026rsquo;}^T\\mathbf{x}+\\mathbf{b}_{k\u0026rsquo;})}\\).\nMaximum Likelihood Estimation Given our formulation in the previous section, we can estimate the parameters of the model via maximum likelihood estimation. Assuming \\(K\\) classes with Gaussian class conditional densities, the likelihood function is\n\\begin{equation*} p(\\mathbf{X}|\\mathbf{\\theta}) = \\prod_{i=1}^n \\mathcal{M}(y_i|\\mathbf{\\pi})\\prod_{k=1}^K \\mathcal{N}(\\mathbf{x}_i|\\mathbf{\\mu}_k, \\mathbf{\\Sigma}_k)^{\\mathbb{1}(y_i=k)}. \\end{equation*}\nTaking the log of this function yields\n\\begin{equation*} \\ln p(\\mathbf{X}|\\mathbf{\\theta}) = \\Big[\\sum_{i=1}^n \\sum_{k=1}^K \\mathbb{1}(y_i=k)\\ln \\pi_k\\Big] + \\sum_{k=1}^K\\Big[\\sum_{i:y_i=c} \\ln \\mathcal{N}(\\mathbf{x}_n|\\mathbf{\\mu}_k, \\mathbf{\\Sigma}_k)\\Big]. \\end{equation*}\nGiven that this is a sum of two different components, we can optimize the multinomial parameter \\(\\mathbf{\\pi}\\) and the class Gaussian parameters \\((\\mathbf{\\mu}_k, \\mathbf{\\Sigma}_k)\\) separately.\nClass Prior For multinomial distributions, the class prior parameter estimation \\(\\hat{\\pi}_k\\) is easily calculated by counting the number of samples belonging to class \\(k\\) and dividing it by the total number of samples.\n\\[ \\hat{\\pi}_k = \\frac{n_k}{n} \\]\nClass Gaussians The Gaussian parameters can be calculated as discussed during the probability review. The parameter estimates are\n\\begin{align*} \\hat{\\mathbf{u}}_k \u0026amp;= \\frac{1}{n_k}\\sum_{i:y_i=k}\\mathbf{x}_i\\\\ \\hat{\\Sigma}_k \u0026amp;= \\frac{1}{n_k}\\sum_{i:y_i=k}(\\mathbf{x}_i - \\hat{\\mathbf{\\mu}}_k)(\\mathbf{x}_i - \\hat{\\mathbf{\\mu}}_k)^T \\end{align*}\nThe Decision Boundary The decision boundary between two classes can be visualized at the point when \\(p(C_k|\\mathbf{x};\\theta) = 0.5\\).\nExample See here for an example using scikit-learn.\n","date":1642831200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1642831200,"objectID":"7b3b17d07ded3a7fc40ad7031aca0872","permalink":"https://ajdillhoff.github.io/notes/linear_discriminant_analysis/","publishdate":"2022-01-22T00:00:00-06:00","relpermalink":"/notes/linear_discriminant_analysis/","section":"notes","summary":"Table of Contents Introduction Gaussian Class Conditional Densities Maximum Likelihood Estimation Example Introduction This section covers classification from a probabilistic perspective. The discriminative approach involves a parameterized function which assigns each input vector \\(\\mathbf{x}\\) to a specific class. We will see that modeling the conditional probability distribution \\(p(C_k|\\mathbf{x})\\) grants us additional benefits while still fulfilling our original classification task.\nLet\u0026rsquo;s begin with a 2 class problem. To classify this with a generative model, we use the class-conditional densities \\(p(\\mathbf{x}|C_i)\\) and class priors \\(p(C_i)\\).","tags":null,"title":"Linear Discriminant Analysis","type":"notes"},{"authors":["Alex Dillhoff"],"categories":null,"content":" Table of Contents Introduction Picking a Model Binary Classification Multiple Classes Introduction With Linear Regression we were able to fit a model to our data in order to make inferences on unseen data points. In the examples, both the input features and observation were continuous. With logistic regression, we will use similar models to classify the data points based on their input features. We start out with the simplest approach: we assume that the data is linearly separable and can be assigned one of \\(K\\) discrete classes.\nIn the binary case, the target variable will takes on either a 0 or 1. For \\(K \u0026gt; 2\\), we will use a \\(K\\) dimensional vector that has a 1 corresponding to the class encoding for that input and a 0 for all other positions. For example, if our possible target classes were \\(\\{\\text{car, truck, person}\\}\\), then a target vector for \\(\\text{person}\\) would be \\(\\mathbf{y} = [0, 0, 1]^T\\).\nThis article will stick to a discriminative approach to logistic regression. That is, we define a discriminant function which assigns each data input \\(\\mathbf{x}\\) to a class. For a probabilistic perspective, see Linear Discriminant Analysis.\nPicking a Model We will again start with a linear model \\(y = f(\\mathbf{x}; \\mathbf{w})\\). Unlike the model used with Linear Regression, ours will need to predict a discrete class label. The logistic model is often approached by introducing the odds of an event occurring:\n\\[ \\frac{p}{1-p}, \\]\nwhere \\(p\\) is the probability of the event happening. As \\(p\\) increases, the odds of it happening increase exponentially.\nOur input \\(p\\) represents the probability in range \\((0, 1)\\) which we want to map to the real number space. To approximate this, we apply the natural logarithm to the odds.\nThe logistic model assumes a linear relationship between the linear model \\(\\mathbf{w}^T\\mathbf{x}\\) and the logit function\n\\[ \\text{logit}(p) = \\ln \\frac{p}{1-p}. \\]\nThis function maps a value in range \\((0, 1)\\) to the space of real numbers. Under this assumption, we can write\n\\[ \\text{logit}(p) = \\mathbf{w}^T\\mathbf{x}. \\]\nThis assumption is reasonable because we ultimately want to predict the probability that an event occurs. The output should then be in the range of \\((0, 1)\\). If the logit function produces output in the range of real numbers, as does our linear model \\(\\mathbf{w}^T\\mathbf{x}\\), then we ultimately want a function that maps from the range of real numbers to to \\((0, 1)\\).\nWe can achieve this using the inverse of the logit function, the logistic sigmoid function. It is defined as\n\\begin{equation*} \\sigma(z) = \\frac{1}{1 + \\exp(-z)}, \\end{equation*}\nwhere \\(z = \\mathbf{w}^T\\mathbf{x}\\).\nThe reason for this choice becomes more clear when plotting the function, as seen below.\nFigure 1: The logistic sigmoid function. Source: Wikipedia The inputs on the \\(x\\) axis are clamped to values between 0 and 1. It is also called a squashing function because of this property. This form is also convenient and arises naturally in many probabilistic settings. With this nonlinear activation function, the form of our model becomes\n\\begin{equation*} f(\\mathbf{x};\\mathbf{w}) = h(\\mathbf{w}^T\\mathbf{x}), \\end{equation*}\nwhere \\(h\\) is our choice of activation function.\nThe logistic sigmoid function also has a convenient derivative, which is useful when solving for the model parameters via gradient descent.\n\\[ \\frac{d}{dx} = \\sigma(x)(1 - \\sigma(x)) \\]\nBinary Classification Consider a simple dataset with 2 features per data sample. Our goal is to classify the data as being one of two possible classes. For now, we\u0026rsquo;ll drop the activation function so that our model represents a line that separates both groups of data.\nFigure 2: Two groups of data that are very clearly linearly separable. In the binary case, we are approximating \\(p(C_1|\\mathbf{x}) = \\sigma(\\mathbf{w}^T \\mathbf{x})\\). Then \\(p(C_2|\\mathbf{x}) = 1 - p(C_1| \\mathbf{x})\\).\nThe parameter vector \\(\\mathbf{w}\\) is orthogonal to the decision boundary that separates the two classes. The model output is such that \\(f(\\mathbf{x};\\mathbf{w}) = 0\\) when \\(\\mathbf{x}\\) lies on the decision boundary. If \\(f(\\mathbf{x};\\mathbf{w}) \\geq 0\\) then \\(\\mathbf{x}\\) is assigned to class 1. It is assigned to class 2 otherwise. Since we originally stated that the model should predict either a 0 or 1, we can use the model result as input to the Heaviside step function.\nFitting the Model via Maximum Likelihood Let \\(y_i \\in \\{0, 1\\}\\) be the target for binary classification and \\(\\hat{y}_i \\in (0, 1)\\) be the output of a logistic regression model. The likelihood function is\n\\[ p(\\mathbf{y}|\\mathbf{w}) = \\prod_{i=1}^n \\hat{y}_i^{y_i}(1 - \\hat{y}_i)^{1 - y_i}. \\]\nLet\u0026rsquo;s briefly take a look at \\(\\hat{y}_i^{y_i}(1 - \\hat{y}_i)^{1 - y_i}\\) to understand the output when the model correctly predicts the \\(i^{\\text{th}}\\) sample or not. Since the output is restricted within the range \\((0, 1)\\), the model will never produce 0 or 1.\nIf the target \\(y_i = 0\\), then we can evaluate the subexpression \\(1 - \\hat{y}_i\\). In this case, the likelihood increases as \\(\\hat{y}_i\\) decreases.\nIf the target \\(y_i = 1\\), then we evaluate the subexpression \\(\\hat{y}_i\\).\nWhen fitting this model, we want to define an error measure based on the above function. This is done by taking the negative logarithm of \\(p(\\mathbf{y}|\\mathbf{w})\\).\n\\[ E(\\mathbf{w}) = -\\ln p(\\mathbf{y}|\\mathbf{w}) = -\\sum_{i=1}^n y_i \\ln \\hat{y}_i + (1 - y_i) \\ln (1 - \\hat{y}_i) \\]\nThis function is commonly referred to as the cross-entropy function.\nIf we use this as an objective function for gradient descent with the understanding that \\(\\hat{y}_i = \\sigma(\\mathbf{w}^T \\mathbf{x})\\), then the gradient of the error function is\n\\[ \\nabla E(\\mathbf{w}) = \\sum_{i=1}^n (\\hat{y}_i - y_i)\\mathbf{x}_i. \\]\nThis results in a similar update rule as linear regression, even though the problem itself is different.\nMeasuring Classifier Performance How do we determine how well our model is performing?\nWe will use L1 loss because it works well with discrete outputs. L1 loss is defined as\n\\begin{equation*} L_1 = \\sum_{i}|\\hat{y}_i - y_i|, \\end{equation*}\nwhere \\(\\hat{y}_i\\) is the ground truth corresponding to \\(\\mathbf{x}_i\\) and \\(y_i\\) is the output of our model. We can further normalize this loss to bound it between 0 and 1. Either way, a loss of 0 will indicate 100% classification accuracy.\nMultiple Classes In multiclass logistic regression, we are dealing with target values that can take on one of \\(k\\) values \\(y \\in \\{1, 2, \\dots, k\\}\\). If our goal is to model the distribution over \\(K\\) classes, a multinomial distribution is the obvious choice. Let \\(p(y|\\mathbf{x};\\theta)\\) be a distribution over \\(K\\) numbers \\(w_1, \\dots, w_K\\) that sum to 1. Our parameterized model cannot be represented exactly by a multinomial distribution, so we will derive it so that it satisfies the same constraints.\nWe can start by introducing \\(K\\) parameter vectors \\(\\mathbf{w}_1, \\dots, \\mathbf{w}_K \\in \\mathbb{R}^{d}\\), where \\(d\\) is the number of input features. Then each vector \\(\\mathbf{w}_k^T \\mathbf{x}\\) represents \\(p(C_k | \\mathbf{x};\\mathbf{w}_k)\\). We need to squash each \\(\\mathbf{w}_k^T \\mathbf{x}\\) so that the output sums to 1.\nThis is accomplished via the softmax function:\n\\[ p(C_k|\\mathbf{x}) = \\frac{\\exp(\\mathbf{w}_k^T \\mathbf{x})}{\\sum_{j} \\exp(\\mathbf{w}_j^T \\mathbf{x})}. \\]\nMaximum Likelihood The target vector for each sample is \\(\\mathbf{y}_i \\in \\mathbb{R}^{k}\\). Likewise, the output vector \\(\\hat{\\mathbf{y}}_i\\) also has \\(k\\) elements.\nThe maximum likelihood function for the multiclass setting is given by\n\\[ p(\\mathbf{Y}|\\mathbf{W}) = \\prod_{i=1}^n \\prod_{k=1}^K p(C_k|\\mathbf{x}_i)^{y_{ik}} = \\prod_{i=1}^n \\prod_{k=1}^K \\hat{y}_{ik}^{y_{ik}}. \\]\n\\(\\mathbf{Y} \\in \\mathbb{R}^{n \\times K}\\) is a matrix of all target vectors in the data set. As with the binary case, we can take the negative logarithm of this function to produce an error function.\n\\[ E(\\mathbf{W}) = -\\ln p(\\mathbf{Y}|\\mathbf{W}) = -\\sum_{i=1}^n \\sum_{k=1}^K y_{ik} \\ln \\hat{y}_{ik} \\]\nThis is the cross-entropy function for multiclass classification.\nThe gradient of this function is given as\n\\[ \\nabla_{\\mathbf{w}_j}E(\\mathbf{W}) = \\sum_{i=1}^n (\\hat{y}_{ij} - y_{ij}) \\mathbf{x}_i. \\]\nPart of your first assignment will be to work through the derivation of this function. It is standard practice at this point, but it is highly valuable to understand how the result was produced.\n","date":1642831200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1642831200,"objectID":"91f03ca8739733727b9c6b475ec22353","permalink":"https://ajdillhoff.github.io/notes/logistic_regression/","publishdate":"2022-01-22T00:00:00-06:00","relpermalink":"/notes/logistic_regression/","section":"notes","summary":"Table of Contents Introduction Picking a Model Binary Classification Multiple Classes Introduction With Linear Regression we were able to fit a model to our data in order to make inferences on unseen data points. In the examples, both the input features and observation were continuous. With logistic regression, we will use similar models to classify the data points based on their input features. We start out with the simplest approach: we assume that the data is linearly separable and can be assigned one of \\(K\\) discrete classes.","tags":null,"title":"Logistic Regression","type":"notes"},{"authors":["Alex Dillhoff"],"categories":null,"content":" Table of Contents Introduction Definition Maximum Likelihood Estimation Making a Decision Relation to Multinomial Logistic Regression MNIST Example Gaussian Formulation Introduction To motivate naive Bayes classifiers, let\u0026rsquo;s look at slightly more complex data. The MNIST dataset was one of the standard benchmarks for computer vision classification algorithms for a long time. It remains useful for educational purposes. The dataset consists of 60,000 training images and 10,000 testing images of size \\(28 \\times 28\\). These images depict handwritten digits. For the purposes of this section, we will work with binary version of the images. This implies that each data sample has 784 binary features.\nWe will use the naive Bayes classifier to make an image classification model which predicts the class of digit given a new image. Each image will be represented by a vector \\(\\mathbf{x} \\in \\mathbb{R}^{784}\\). Modeling \\(p(\\mathbf{x}|C_k)\\) with a multinomial distribution would require \\(10^{784} - 1\\) parameters since there are 10 classes and 784 features.\nFigure 1: Samples of the MNIST training dataset. With the naive assumption that the features are independent conditioned on the class, the number model parameters becomes \\(10 \\times 784\\).\nDefinition A naive Bayes classifier makes the assumption that the features of the data are independent. That is, \\[ p(\\mathbf{x}|C_k, \\mathbf{\\theta}) = \\prod_{d=1}^D p(x_i|C_k, \\theta_{dk}), \\] where \\(\\mathbf{\\theta}_{dk}\\) are the parameters for the class conditional density for class \\(k\\) and feature \\(d\\). Using the MNIST dataset, \\(\\mathbf{\\theta}_{dk} \\in \\mathbb{R}^{784}\\). The posterior distribution is then\n\\begin{equation*} p(C_k|\\mathbf{x},\\mathbf{\\theta}) = \\frac{p(C_k|\\mathbf{\\pi})\\prod_{i=1}^Dp(x_i|C_k, \\mathbf{\\theta}_{dk})}{\\sum_{k\u0026rsquo;}p(C_{k\u0026rsquo;}|\\mathbf{\\pi})\\prod_{i=1}^Dp(x_i|C_{k\u0026rsquo;},\\mathbf{\\theta}_{dk\u0026rsquo;})}. \\end{equation*}\nIf we convert the input images to binary, the class conditional density \\(p(\\mathbf{x}|C_k, \\mathbf{\\theta})\\) takes on the Bernoulli pdf. That is,\n\\begin{equation*} p(\\mathbf{x}|C_k, \\mathbf{\\theta}) = \\prod_{i=1}^D\\text{Ber}(x_i|\\mathbf{\\theta}_{dk}). \\end{equation*}\nThe parameter \\(\\theta_{dk}\\) is the probability that the feature \\(x_i=1\\) given class \\(C_k\\).\nMaximum Likelihood Estimation Fitting a naive Bayes classifier is relatively simple using MLE. The likelihood is given by\n\\begin{equation*} p(\\mathbf{X}, \\mathbf{y}|\\mathbf{\\theta}) = \\prod_{n=1}^N \\mathcal{M}(y_n|\\mathbf{\\pi})\\prod_{d=1}^D\\prod_{k=1}^{K}p(x_{nd}|\\mathbf{\\theta}_{dk})^{\\mathbb{1}(y_n=k)}. \\end{equation*}\nTo derive the estimators, we first take the log of the likelihood:\n\\begin{equation*} \\ln p(\\mathbf{X}, \\mathbf{y}|\\mathbf{\\theta}) = \\Bigg[\\sum_{n=1}^N\\sum_{k=1}^K \\mathbb{1}(y_n = k)\\ln \\pi_k\\Bigg] + \\sum_{k=1}^K\\sum_{d=1}^D\\Bigg[\\sum_{n:y_n=k}\\ln p(x_{nd}|\\theta_{dk})\\Bigg]. \\end{equation*}\nThus, we have a term for the the multinomial and terms for the class-feature parameters. As with previous models that use a multinomial form, the parameter estimate for the first term is computed as\n\\begin{equation*} \\hat{\\pi}_k = \\frac{N_k}{N}. \\end{equation*}\nThe features used in our data are binary, so the parameter estimate for each \\(\\hat{\\theta}_{dk}\\) follows the Bernoulli distribution:\n\\begin{equation*} \\hat{\\theta}_{dk} = \\frac{N_{dk}}{N_{k}}. \\end{equation*}\nThat is, the number of times that feature \\(d\\) is in an example of class \\(k\\) divided by the total number of samples for class \\(k\\).\nMaking a Decision Given parameters \\(\\mathbf{\\theta}\\), how can we classify a given data sample?\n\\begin{equation*} \\text{arg}\\max_{k}p(y=k)\\prod_{i}p(x_i|y=k) \\end{equation*}\nRelation to Multinomial Logistic Regression Consider some data with discrete features having one of \\(K\\) states, then \\(x_{dk} = \\mathbb{1}(x_d=k)\\). The class conditional density, in this case, follows a multinomial distribution:\n\\[ p(y=c|\\mathbf{x}, \\mathbf{\\theta}) = \\prod_{d=1}^D \\prod_{k=1}^K \\theta_{dck}^{x_{dk}}. \\]\nWe can see a connection between naive Bayes and logistic regression when we evaluate the posterior over classes:\n\\begin{align*} p(y=c|\\mathbf{x}, \\mathbf{\\theta}) \u0026amp;= \\frac{p(y)p(\\mathbf{x}|y, \\mathbf{\\theta})}{p(\\mathbf{x})}\\\\ \u0026amp;= \\frac{\\pi_c \\prod_{d} \\prod_{k} \\theta_{dck}^{x_{dk}}}{\\sum_{c\u0026rsquo;}\\pi_{c\u0026rsquo;}\\prod_{d}\\prod_{k}\\theta_{dc\u0026rsquo;k}^{x_{dk}}} \\\\ \u0026amp;= \\frac{\\exp[\\log \\pi_c + \\sum_d \\sum_k x_{dk}\\log \\theta_{dck}]}{\\sum_{c\u0026rsquo;} \\exp[\\log \\pi_{c\u0026rsquo;} + \\sum_d \\sum_k x_{dk} \\log \\theta_{dc\u0026rsquo;k}]}. \\end{align*}\nThis has the same form as the softmax function:\n\\[ p(y=c|\\mathbf{x}, \\mathbf{\\theta}) = \\frac{e^{\\beta^{T}_c \\mathbf{x} + \\gamma_c}}{\\sum_{c\u0026rsquo;=1}^C e^{\\beta^{T}_{c\u0026rsquo;}\\mathbf{x} + \\gamma_{c\u0026rsquo;}}} \\]\nMNIST Example With the model definition and parameter estimates defined, we can fit and evaluate the model. Using scikit-learn, we fit a Bernoulli naive Bayes classifier on the MNIST training set: Naive Bayes.\nGaussian Formulation If our features are continuous, we would model them with univariate Gaussians.\n","date":1642831200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1642831200,"objectID":"f86c9f09aae89628ddd3d235958176db","permalink":"https://ajdillhoff.github.io/notes/naive_bayes/","publishdate":"2022-01-22T00:00:00-06:00","relpermalink":"/notes/naive_bayes/","section":"notes","summary":"Table of Contents Introduction Definition Maximum Likelihood Estimation Making a Decision Relation to Multinomial Logistic Regression MNIST Example Gaussian Formulation Introduction To motivate naive Bayes classifiers, let\u0026rsquo;s look at slightly more complex data. The MNIST dataset was one of the standard benchmarks for computer vision classification algorithms for a long time. It remains useful for educational purposes. The dataset consists of 60,000 training images and 10,000 testing images of size \\(28 \\times 28\\).","tags":["machine learning"],"title":"Naive Bayes","type":"notes"},{"authors":["Alex Dillhoff"],"categories":null,"content":" Table of Contents Resources Introduction Definition Forward Pass Activation Functions Multi-Class Classification Backpropagation Non-Convex Optimization Resources https://playground.tensorflow.org/ Introduction Previously, we studied the Perceptron and saw that while it made for a simple linear classifier, it is severely limited to problems that are already linearly separable. This limitation was resolved by introduding a hidden layer with multiple perceptron units, aptly named Multi-Layer Perceptrons.\nIn this series, we will explore the more general method of neural networks. We will see that even a network of only two layers can approximate any continuous functional mapping to arbitrary accuracy. Through a discussion about network architectures, activation functions, and backpropagation, we will understand and use neural networks to resolve a large number of both classification and regression tasks.\nDefinition We will take an abstract view of neural networks in which any formulation of a neural network defines a nonlinear mapping from an input space to some output space. This implies that our choice of activation function must be nonlinear. The function we create will be parameterized by some weight matrix \\(W\\). Thus, any neural network can be simply formulated as\n\\[ f(\\mathbf{x};W). \\]\nFigure 1: General neural network diagram. A neural network is in part defined by its layers, the number of nodes in each layer, the choice of activation function, and the choice of loss function.\nEach layer has a number of weights equal to the number of input nodes times the number of output nodes. This is commonly represented as a weight matrix \\(W\\).\nThe network produces output through the forward pass and computes the gradients with respect to that output in the backwards pass.\nForward Pass Computing the output is done in what is called the forward pass.\nOur neural network function takes in an input \\(\\mathbf{x} \\in \\mathbb{R}^D\\), where \\(D\\) is the number of features in our input space. Each output node \\(a_j\\) in a hidden layer \\(h_l\\) has a corresponding weight vector \\(\\mathbf{w}_j^{(l)}\\). The intermediate output of a hidden layer \\(h_l\\) is a linear combination of the weights and the input followed by some nonlinear function. Node \\(a_j\\) of a hidden layer is computed as\n\\[ a_j = \\sum_{i=1}^d w_{ji}^{(l)} x_{i} + w_{j0}^{(l)}. \\]\nAs with Linear Regression, we will prepend a constant 1 to our input so that the computation is simply\n\\[ a_{j} = \\sum_{i=0}^d w_{ji}^{(i)} x_i = \\mathbf{w}_j^T \\mathbf{x}. \\]\nThe final output of the hidden layer is \\(a_j\\) transformed by a nonlinear function \\(g\\) such that\n\\[ z_j = g(a_j). \\]\nWe can combine all weight vectors for each hidden layer node into a weight matrix \\(W \\in \\mathbb{R}^{n \\times d}\\), where \\(n\\) is the number of nodes in the layer and \\(d\\) is the number of input features such that\n\\begin{equation*} W = \\begin{bmatrix} \\mathbf{w}_1^T\\\\ \\vdots\\\\ \\mathbf{w}_n^T\\\\ \\end{bmatrix}. \\end{equation*}\nThen the output of the hidden layer can be computed as\n\\[ \\mathbf{a} = W\\mathbf{x}. \\]\nIf you instead wanted to separate the bias term, this would be\n\\[ \\mathbf{a} = W\\mathbf{x} + \\mathbf{b}. \\]\nUsing the notation to specify the individual layer, we can write the output of a full network. Let \\(W^{(l)} \\in \\mathbb{R}^{n_{l} \\times n_{l-1}}\\) be the weights for layer \\(l\\) which have \\(n_{l-1}\\) input connections and \\(n_{l}\\) output nodes. The activation function for layer \\(l\\) is given by \\(g^{(l)}\\).\nThe complete forward pass of the network is computed by repeating the following step for all layers:\n\\[ \\mathbf{z}^{(l)} = g^{(l)}(\\mathbf{a}^{(l-1)}), \\]\nwhere\n\\[ \\mathbf{a}^{(l-1)} = W^{(l-1)}\\mathbf{z}^{(l-1)} + \\mathbf{b}^{(l-1)}. \\]\nOnce all layers have been computed, then the output of the last layer, \\(\\hat{\\mathbf{y}}^{(L)}\\) is used as the final output of the model. For training, this is compared with some ground truth label \\(\\mathbf{y}\\) using a loss function \\(\\mathcal{L}\\):\n\\[ \\mathcal{L}(\\hat{\\mathbf{y}}, \\mathbf{y}). \\]\nXOR Example Consider the XOR problem. A single Perceptron was unable to solve that problem. However, adding a hidden layer and forming a multi-layer perceptron network allowed for a more complex decision boundary. Consider the network below and produce the output given all combinations of binary input: \\(\\{(0, 0), (0, 1), (1, 0), (1, 1)\\}\\).\nFigure 2: A network with 1 hidden layer that computes XOR. Source: https://athitsos.utasites.cloud/courses/cse4309_fall2021/lectures/09a_neural_networks.pdf Activation Functions Sigmoid Function \\[ g(x) = \\frac{1}{1 + e^{-x}} \\]\nThe logistic sigmoid function serves two purposes. First, it allows the output of the neuron to be interpreted as a posterior probability. Note that this is not actually a probability. Second, it is a continuous function for which the derivative can be computed:\n\\[ g\u0026rsquo;(x) = g(x)(1 - g(x)). \\]\nHyperbolic Tangent Function \\[ \\tanh x = \\frac{e^{x} - e^{-x}}{e^{x} + e^{-x}} \\]\nThe hyperbolic tangent function maps input to a range of \\((-1, 1)\\).\nThe derivative is calculated as\n\\[ \\frac{d}{dx} \\tanh x = 1 - \\tanh^2 x. \\]\nFigure 3: Hyperbolic Tangent Function. Source: Wolfram Key Terms\nbias activation function Neurons fire after input reaches some threshold. Differential activation functions necessary for backpropagation. Multi-class learning How long to train? Weight decay How many layers versus how many nodes per layer? Training Data split (train/test/val) Multi-Class Classification Consider an output layer of a network with \\(k\\) nodes. Each of these nodes represents a decision node for a one-versus-all classifier. For a classification task, we have to think about whether or not the sum of squares loss function works.\nAs far as activation functions go, the logistic sigmoid function is a good way to produce some interpretation of probability. If we treat every output node as its own one versus all classifier, then a logistic sigmoid at the end of each one would indicate the \u0026ldquo;probability\u0026rdquo; that node \\(k\\) assigns class \\(k\\).\nHow do we formulate this in a neural network?\nThe number of nodes in the output layer will be \\(K\\), the number of classes. Since the output of each node produces a value in range \\((0, 1)\\), we want to construct a target value that works with this. Instead of assigning an integer to each class label (e.g. 1 for class 2, 2 for class 3, etc.), we will encode the target label as a \\(K\\) dimensional vector. For example, if our class label is for the class 1, then the corresponding target vector will be\n\\begin{equation*} \\mathbf{t} = \\begin{bmatrix} 1\\\\ 0\\\\ \\vdots\\\\ 0 \\end{bmatrix}. \\end{equation*}\nSince the output of our final layer is also a \\(K\\) dimensional vector, we can compare the two using some loss function.\nBackpropagation Given a series of linear layers with nonlinear activation functions, how can we update the weights across the entire network?\nThe short answer is through the chain rule of differentiation. Let\u0026rsquo;s explore this through an example.\nAfter constructing some series of hidden layers with an arbitrary number of nodes, we will pick an error function that provides a metric of how our network performs on a given regression or classification task. This loss is given by \\(\\mathcal{L}\\).\nNeural networks are traditionally trained using gradient descent. The goal is to optimize the weights such that they result in the lowest loss, or error. This is also why our choice of loss function is important.\n\\[ \\mathbf{W}^* = \\text{argmin}\\frac{1}{n}\\sum_{i=1}^n \\mathcal{L}(f(\\mathbf{x}^{(i)}; \\mathbf{W}), \\mathbf{y}^{(i)}) \\]\nWe first compute the gradients of the network with respect to the weights and biases. Then, we use those gradients to update our previous values for the weights and biases.\nA Simple Example We will first look at computing these gradients on a smaller network for binary classification with 1 hidden layer and 1 output layer. The loss function is defined using the binary cross-entropy function:\n\\[ \\mathcal{L}(\\hat{\\mathbf{y}}, \\mathbf{y}) = -\\mathbf{y}\\log \\hat{\\mathbf{y}} - (1 - \\mathbf{y}) \\log (1 - \\hat{\\mathbf{y}}) \\]\nThe network\u0026rsquo;s output is computed in sequence following\n\\begin{align*} \\mathbf{a}^{(1)} \u0026amp;= W^{(1)}\\mathbf{x} + \\mathbf{b}^{(1)}\\\\ \\mathbf{z}^{(1)} \u0026amp;= g^{(1)}(\\mathbf{a}^{(1)})\\\\ \\mathbf{a}^{(2)} \u0026amp;= W^{(2)}\\mathbf{z}^{(1)} + \\mathbf{b}^{(2)}\\\\ \\mathbf{z}^{(2)} \u0026amp;= g^{(2)}(\\mathbf{a}^{(2)})\\\\ \\end{align*}\nThe goal is to compute the gradients for all weights and biases:\n\\[ \\frac{d\\mathcal{L}}{dW^{(1)}},\\quad \\frac{d\\mathcal{L}}{d\\mathbf{b}^{(1)}},\\quad \\frac{d\\mathcal{L}}{dW^{(2)}},\\quad \\frac{d\\mathcal{L}}{d\\mathbf{b}^{(2)}}. \\]\nStarting with the weights of the output layer:\n\\[ \\frac{d\\mathcal{L}}{dW^{(2)}} = \\frac{d\\mathcal{L}}{d\\mathbf{z}^{(2)}} \\frac{d\\mathbf{z}^{(2)}}{d\\mathbf{a}^{(2)}} \\frac{d\\mathbf{a}^{(2)}}{dW^{(2)}}. \\]\nThe first step is to compute the partial gradient of the loss function with respect to its input \\(\\hat{\\mathbf{y}} = \\mathbf{z}^{(2)}\\):\n\\[ \\frac{d\\mathcal{L}}{d\\mathbf{z}^{(2)}} = \\frac{\\mathbf{z}^{(2)} - \\mathbf{y}}{\\mathbf{z}^{(2)}(1 - \\mathbf{z}^{(2)})}. \\]\nNext, compute the gradient of the last layer\u0026rsquo;s activation function with respect to its input \\(\\mathbf{a}^{(2)}\\):\n\\[ \\frac{d\\mathbf{z}^{(2)}}{d\\mathbf{a}^{(2)}} = \\mathbf{z}^{(2)}(1 - \\mathbf{z}^{(2)}). \\]\nFinally, we compute \\(\\frac{d\\mathbf{a}^{(2)}}{dW^{(2)}}\\): \\[ \\frac{d\\mathbf{a}^{(2)}}{dW^{(2)}} = \\mathbf{z}^{(1)}. \\]\nPutting all of this together yields\n\\begin{align*} \\frac{d\\mathcal{L}}{dW^{(2)}} \u0026amp;= \\frac{\\mathbf{z}^{(2)} - \\mathbf{y}}{\\mathbf{z}^{(2)}(1 - \\mathbf{z}^{(2)})} * \\mathbf{z}^{(2)}(1 - \\mathbf{z}^{(2)}) * \\mathbf{z}^{(1)}\\\\ \u0026amp;= \\mathbf{z}^{(1)} (\\mathbf{z}^{(2)} - \\mathbf{y}). \\end{align*}\nNon-Convex Optimization Optimizing networks with non-linearities produces a non-convex landscape. Depending on our choice of optimization algorithm and initial starting point, the algorithm will most likely get \u0026ldquo;stuck\u0026rdquo; in some local minimum. Consider the figure below produced by (Li et al. 2017).\nFigure 4: Loss surface of ResNet-56 (Li et al.) References Li, Hao, Zheng Xu, Gavin Taylor, Christoph Studer, and Tom Goldstein. 2017. “Visualizing the Loss Landscape of Neural Nets,” 11. ","date":1642831200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1642831200,"objectID":"16c8d84377f70f04087cbe417e84cd5f","permalink":"https://ajdillhoff.github.io/notes/neural_networks/","publishdate":"2022-01-22T00:00:00-06:00","relpermalink":"/notes/neural_networks/","section":"notes","summary":"Table of Contents Resources Introduction Definition Forward Pass Activation Functions Multi-Class Classification Backpropagation Non-Convex Optimization Resources https://playground.tensorflow.org/ Introduction Previously, we studied the Perceptron and saw that while it made for a simple linear classifier, it is severely limited to problems that are already linearly separable. This limitation was resolved by introduding a hidden layer with multiple perceptron units, aptly named Multi-Layer Perceptrons.\nIn this series, we will explore the more general method of neural networks.","tags":["machine learning"],"title":"Neural Networks","type":"notes"},{"authors":["Alex Dillhoff"],"categories":null,"content":" Table of Contents Introduction The Perceptron Learning Algorithm Limitations of Single-Layer Perceptrons Introduction A popular example of a Logistic Regression model is the perceptron. Proposed by Frank Rosenblatt in 1962, the perceptron is defined as a generalized linear model:\n\\begin{equation*} f(\\mathbf{w}^T\\mathbf{\\phi}(\\mathbf{x})), \\end{equation*}\nwhere \\(\\phi\\) is a basis function and \\(f\\) is a stepwise function with the form\n\\begin{equation*} f(a) = \\begin{cases} 1, a \\geq 0\\\\ -1, a \u0026lt; 0 \\end{cases} \\end{equation*}\nTo match this, the targets will take on a value of either 1 or -1.\nThe Perceptron Learning Algorithm Based on the stepwise function, the parameters \\(\\mathbf{w}\\) should lead to outputs above 0 for one class and outputs below 0 for the other. There is 0 error with a correct classification.\nThe original formulation does not work well with gradient based optimization methods due to the fact that the derivative of the stepwise function is 0 almost everyone. To get around this, the perceptron criterion is used:\n\\begin{equation*} E(\\mathbf{w}) = -\\sum_i \\mathbf{w}^T\\phi(\\mathbf{x}_i)\\hat{y}_i, \\end{equation*}\nwhere \\(\\hat{y}_i\\) is the target class (either 1 or -1).\nAn incorrect classification will minimize \\(\\mathbf{w}^T\\phi_i y_i\\). We can consider this loss only for misclassified patterns.\nUpdate Steps\nFor each input, evaluate \\(f(\\mathbf{w}^T\\phi(\\mathbf{x}_i))\\). For incorrect classifications Add \\(\\phi(\\mathbf{x}_i)\\) to \\(\\mathbf{w}\\) estimate for class 1 Subtract \\(\\phi(\\mathbf{x}_i)\\) from \\(\\mathbf{w}\\) for class 2. Does not necessarily get better each step, but guaranteed to converge.\nLimitations of Single-Layer Perceptrons Single layer perceptrons are limited to solving linearly separable patterns. As we have seen with a few datasets now, expecting our data to be linearly separable is wishful thinking. Minsky and Papert exposed this limitation in their book Perceptrons: an introduction to computational geometry.\nConsider the example XOR problem. It is a binary classification problem consisting of 4 data points. It is not linearly separable as seen in the figure below.\nFigure 1: XOR cannot be solved with a linear classifier. This is the result of using only a single Perceptron. What if we added another perceptron? A single perceptron computes \\(\\mathbf{w}^T + b\\). It is important to transform the first perceptron\u0026rsquo;s output using a non-linear activation function, otherwise the output would be similar to that of a logistic regression model. The updated \u0026ldquo;network\u0026rdquo; is shown below.\nFigure 2: A 2 layer perceptron for which each layer has a single node. The result is the same! The original input in 2D is transformed to a single dimensional output. This is then used as input to the second perceptron. The result is a linear decision boundary followed by another linear decision boundary. What if we used 2 perceptrons in the first layer? The idea is that using two linear decision boundaries in a single space would allow our model to create a more complex boundary. The updated network is shown below.\nFigure 3: A 2 layer perceptron for which the first layer has 2 nodes. This effectively solves the XOR problem! Since each node computes a linear combination of the input, we can visualize two decision boundaries with respect to the input space.\nFigure 4: Visualization of input space. Similarly, we can visualize how the data points are transformed by visualizing the space of the output layer.\nFigure 5: Output space ","date":1642831200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1642831200,"objectID":"05741d6538d42b28c94ed3a24f23ee36","permalink":"https://ajdillhoff.github.io/notes/perceptron/","publishdate":"2022-01-22T00:00:00-06:00","relpermalink":"/notes/perceptron/","section":"notes","summary":"Table of Contents Introduction The Perceptron Learning Algorithm Limitations of Single-Layer Perceptrons Introduction A popular example of a Logistic Regression model is the perceptron. Proposed by Frank Rosenblatt in 1962, the perceptron is defined as a generalized linear model:\n\\begin{equation*} f(\\mathbf{w}^T\\mathbf{\\phi}(\\mathbf{x})), \\end{equation*}\nwhere \\(\\phi\\) is a basis function and \\(f\\) is a stepwise function with the form\n\\begin{equation*} f(a) = \\begin{cases} 1, a \\geq 0\\\\ -1, a \u0026lt; 0 \\end{cases} \\end{equation*}","tags":["machine learning"],"title":"Perceptron","type":"notes"},{"authors":["Alex Dillhoff"],"categories":null,"content":" Table of Contents Summary Maximum Variance Formulation Motivating Example Noise and Redundancy Covariance Matrix Summary If we have some measurements of data, but do not know the underlying dynamics, PCA can resolve this by producing a change of basis such that the dynamics are reflected upon the eigenvectors.\nMaximum Variance Formulation Although there are several derivations of PCA. I really like the approach of projecting the data onto a lower dimensional space in order to maximize the variance of the projected data.\nLet \\(\\mathbf{X}\\) be a dataset of \\(N\\) samples, each with \\(D\\) features. The goal of PCA is to project this data onto an $M$-dimensional space such that \\(M \u0026lt; D\\).\nRemember that the goal here is to maximize the variance of the projected data.\nHow do we project the data? Let\u0026rsquo;s say that we want to go from $D$-dimensional space to $M$-dimensional space where \\(M = 1\\). Let the vector \\(\\mathbf{u}\\) define this 1D space. If \\(\\mathbf{u}\\) is a unit vector, then the scalar projection of a data point \\(\\mathbf{x}\\) onto \\(\\mathbf{u}\\) is simply \\(\\mathbf{u} \\cdot \\mathbf{x}\\).\nSince we are maximizing variance, we need to subtract the mean sample from our data\n\\begin{equation*} \\mathbf{\\bar{x}} = \\frac{1}{N}\\sum_{n=1}^{N}\\mathbf{x}_n \\end{equation*}\nThen, the mean of the projected data is \\(\\mathbf{u} \\cdot \\mathbf{\\bar{x}}\\).\nWith the mean of the projected data, we can calculate the variance:\n\\begin{equation*} \\frac{1}{N}\\sum_{n=1}^{N}\\{\\mathbf{u}^T\\mathbf{x}_n - \\mathbf{u}^T\\mathbf{\\bar{x}}\\}^2 = \\mathbf{u}^T\\mathbf{S}\\mathbf{u} \\end{equation*}\nwhere\n\\begin{equation*} \\mathbf{S} = \\frac{1}{N}\\sum_{n=1}^{N}(\\mathbf{x}_n - \\mathbf{\\bar{x}})(\\mathbf{x}_n - \\mathbf{\\bar{x}})^T \\end{equation*}\nThus, if we are maximizing the variance of the projected data, then we are maximizing \\(\\mathbf{u}^T\\mathbf{S}\\mathbf{u}\\)!\nSo this is an optimization problem, but there is one minor issue to deal with: if \\(\\mathbf{u}\\) is not constrained, then we scale it to infinity while maximizing the function.\nBefore, we stated that \\(\\mathbf{u}\\) is a unit vector. Thus, the constraint is that \\(\\mathbf{u} \\cdot \\mathbf{u} = 1\\).\nAfter reviewing Lagrangian multipliers\u0026hellip;\nTo enforce this constraint, we can use a lagrangian multiplier:\n\\begin{equation*} \\mathcal{L}(\\mathbf{u}, \\lambda) = \\mathbf{u}^T\\mathbf{S}\\mathbf{u} + \\lambda(1 - \\mathbf{u}^T\\mathbf{u}). \\end{equation*}\nLet\u0026rsquo;s see what happens when we compute the stationary points (critical points) of the given Lagrangian function.\n\\begin{equation*} \\nabla_{\\mathbf{u}}\\mathcal{L}(\\mathbf{u}, \\lambda) = \\mathbf{S}\\mathbf{u} - \\lambda \\mathbf{u} = 0 \\end{equation*}\nThis implies that\n\\begin{equation*} \\mathbf{S}\\mathbf{u} = \\lambda \\mathbf{u} \\end{equation*}\nThat particular equation means that \\(\\mathbf{u}\\) is an eigenvector of \\(\\mathbf{S}\\) with \\(\\lambda\\) being the corresponding eigenvalue. Since \\(\\mathbf{u}\\) is a unit vector, we can conveniently left-multiply both sides of that equation by \\(\\mathbf{u}^T\\), resulting in:\n\\begin{equation*} \\mathbf{u}^T\\mathbf{S}\\mathbf{u} = \\lambda \\end{equation*}\nWhat does this mean?\nThat means that the variance is maximized when \\(\\mathbf{u}\\) is the eigenvector corresponding to the largest eigenvalue \\(\\lambda\\).\nWe can repeat this process to find the direction (eigenvector) corresponding to the second largest variance by considering eigenvectors that are orthogonal to the first one. This is where an orthonormal eigenbasis comes in handy.\nMotivating Example Consider a frictionless, massless spring that produces dynamics in a single direction.\nFigure 1: Toy model of spring with ball observed from 3 perspectives. We can clearly understand that the spring will only move in a single direction. That movement reflects the underlying dynamics of this data. To understand how PCA can be useful in this situation, let\u0026rsquo;s pretend that we do not know the underlying dynamics. Instead, we observe that the data seems to go back and forth along a single axis. We observe the data over time from 3 different perspectives given by the cameras in the above figure.\nFrom the perspective of the observer, we are recording some observations in an effort to understand which dimensions are the most salient at representing the underlying mechanics. From the above figure, we know that the most important dimension in this system is that of the labeled x-axis.\nHow would we figure this out if we did not already know that?\nEach camera has its own coordinate system (basis). If each camera gives us a 2D location of the ball relative to that camera\u0026rsquo;s basis, then each sample in time gives us a 6D vector of locations.\nEquivalently, every time sample is a vector that lies in an $m$-dimensional vector space spanned by an orthonormal basis.\nIs it possible to find another basis that best expresses the data?\nMathemtically, is there some matrix \\(P\\) that changes our original data \\(X\\) into a new representation \\(Y\\)?\n\\(PX = Y\\)\nNoise and Redundancy When observing real data, we will have to account for noisy measurements. Noise can come from a wide variety of sources. Being able to reduce it or filter it out is vital to understanding the underlying system.\nNoise is an arbitrary measurement and means nothing without some measurement of a signal. Thus, we typically measure the amount of noise in our system using a Signal-to-Noise Ratio (SNR). This assumes we have some idea of what our signal is. This is usually given based on the nature of whatever problem we are investigating. In the toy example, we know that the spring largely moves in a single dimension. That is the signal we expect to observe.\nFor arguments sake, imagine we that the recordings over time from a single camera plot the following data:\nFrom our advantageous position of knowing the true nature of the problem, we understand there really should be no noise. However, let\u0026rsquo;s say that our camera has some noise in interpreting the precise location of the ball at any given time. In this case, our SNR is quite high, which is good! Ideally, it would be a straight line.\nThere is a second factor to consider: the fact that we are taking measurements from multiple sensors means that there may be some redundancy among the data collected from them. If we were to discover features that have high redundancy, we could be confident in concluding that they are highly correlated.\nCovariance Matrix Let \\(X\\) be a an \\(m \\times n\\) matrix of \\(n\\) observations with \\(m\\) features per observation.\nWe can produce a covariance matrix of the features via \\(S_{X} = \\frac{1}{n-1}XX^{T}\\).\nThis gives us a measurement of the correlations between all pairs of measurements.\nIf we want to reduce redunancy between separate measurements (those in the off-diagonal of the matrix), we would then want to diagonalize this matrix. In terms of the equation \\(PX=Y\\), this has the effective of finding a new covariance matrix \\(S_{Y}\\) that is diagonal. This means that each value in the off-diagonal of \\(S_{Y}\\) is 0.\nPCA has a convenient assumption: the change of basis matrix \\(P\\) is orthonormal. Why is this convenient? PCA can then select the normalized direction in the feature space for which the variance in the data is maximized. This is called the first principal component. Because we assume \\(P\\) is orthonormal, the subsequent principal components must be orthogonal to the previously discovered components.\nOne more thing If \\(P\\) is not orthonormal, then we can simply scale our eigenvectors to maximize variance.\n","date":1642831200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1642831200,"objectID":"cddf33f5490eea81f22d826d26808a07","permalink":"https://ajdillhoff.github.io/notes/principal_component_analysis/","publishdate":"2022-01-22T00:00:00-06:00","relpermalink":"/notes/principal_component_analysis/","section":"notes","summary":"Table of Contents Summary Maximum Variance Formulation Motivating Example Noise and Redundancy Covariance Matrix Summary If we have some measurements of data, but do not know the underlying dynamics, PCA can resolve this by producing a change of basis such that the dynamics are reflected upon the eigenvectors.\nMaximum Variance Formulation Although there are several derivations of PCA. I really like the approach of projecting the data onto a lower dimensional space in order to maximize the variance of the projected data.","tags":["dimensionality reduction","machine learning"],"title":"Principal Component Analysis","type":"notes"},{"authors":["Alex Dillhoff"],"categories":null,"content":" Table of Contents Introduction A Simple Example Probability Distributions Conditional Probability Rules of Probability Random Variables Continuous Variables Expectation, Variance, and Covariance Introduction Probability theory provides a consistent framework for the quantification and manipulation of uncertainty. It allows us to make the best decisions given the limited information we may have. Many tasks, models, and evaluation metrics that we will explore in this course are either based on, or are inspired by, probability theory.\nA Simple Example Scenario: There are two cookie jars, a blue one for cookies with oatmeal raisin cookies and a red one for chocolate chip cookies. The jar with oatmeal raisin cookies has 8 cookies in it. The chocolate chip jar has 10 cookies. Some monster took 2 of the chocolate chip cookies and placed them in the oatmeal raisin jar and placed 1 of the oatmeal raisin cookies in the chocolate chip jar. Thus, the oatmeal raisin jar has 2 chocolate chip and 7 oatmeal raisin. The chocolate chip jar has 8 chocolate chip and 1 oatmeal raisin.\nLet\u0026rsquo;s say that we pick the chocolate chip jar 80% of the time and the oatmeal raisin jar 20% of the time. For a given jar, the cookies inside are all equally likely to be picked. We can assign this probability to random variables:\n\\(J\\) - The type of jar, either blue \\(b\\) or red \\(r\\). \\(C\\) - The type of cookie, either oatmeal \\(o\\) or chocolate chip \\(c\\). We can define the probability of picking a particular jar:\n\\(p(J=b) = 0.2\\) \\(p(J = r) = 0.8\\) Notice that their sum is 1.0. These probabilities can be estimated empirically given an observer recording the events. We may also define the probabilities of picking a particular type of cookie.\n\\(p(C = o)\\) \\(p(C = c)\\) For each jar, the probabilities of picking the cookies must sum to 1. The tables below show the individual probabilities of picking each type of cookie from each jar. Since we can observe the actual quantities, we can define the probabilities empirically.\nChocolate Chip Oatmeal Raisin Blue Jar 2 / 9 = 0.222 7 / 9 = 0.778 Chocolate Chip Oatmeal Raisin Red Jar 8 / 9 = 0.889 1 / 9 = 0.111 Given these quantities, we can ask slightly more complicated questions such as \u0026ldquo;what is the probability that I will select the red jar AND take a chocolate chip cookie?\u0026rdquo; This is expressed as a joint probability distribution, written as \\(p(J = r, C = c)\\). It is defined based on two events:\nthe prior probability of picking the red jar, the conditional probability of picking a chocolate chip cookie conditioned on the event that the red jar was picked. \\begin{equation*} p(J=r, C=c) = p(C=c | J=r) p(J = r) \\end{equation*}\nThis is also referred to as the product rule.\nWe already know \\(p(J=r) = 0.8\\). From the table above, we can see that \\(p(C=c|J=r) = 0.889\\). Thus, \\(p(C=c,J=r) = 0.8 * 0.889 = 0.711\\).\nIf we knew nothing about the contents of the jar or the prior probabilities of selecting a jar, we could measure the joint probability empirically. This would simply be the number of times we select the red jar AND a chocolate chip cookie divided by total number of trials. For best results, perform an infinite number of trials.\nIf instead we wanted to measure the conditional probability \\(p(C=c|J=r)\\), we would simply take the number of times a chocolate chip cookie is taken from the red jar and divide by the total number of times the red jar was selected.\nWe can construct a joint probability table given the joint probabilities of all the events listed.\nChocolate Chip Oatmeal Raisin Red Jar 0.711 0.089 Blue Jar 0.044 0.156 If you summed each row and further took the sum of the sum of rows, you would get 1. Likewise, the sum of the sum of columns would equal 1.\nSumming the columns for each row yields the prior probability of selecting each type of jar. Similarly, summing the rows for each column gives the prior probability of selecting that type of cookie. This is referred to as the marginal probability or sum rule, which is computed by summing out the other variables in the joint distribution. For example,\n\\begin{equation*} p(x_i) = \\sum_j p(x_i, y_j) \\end{equation*}\nEmpirically, this is computed as the number of times event \\(x_i\\) occurs out of ALL trials.\nAlthough the joint probabilities \\(p(X, Y)\\) and \\(p(Y, X)\\) would be written slightly differently, they are equal. With this in mind, we can set them equal to each other to derive Bayes\u0026rsquo; rule:\n\\begin{align*} p(X, Y) \u0026amp;= p(Y, X)\\\\ p(X|Y)p(Y) \u0026amp;= p(Y|X)p(X)\\\\ p(X|Y) \u0026amp;= \\frac{p(Y|X)p(X)}{p(Y)} \\end{align*}\nIn this context, \\(p(X|Y)\\) is referred to as the posterior probability of event \\(X\\) conditioned on the fact that we know event \\(Y\\) has occurred. On the right, \\(p(X)\\) is the prior probability of event \\(X\\) in the absence of any additional evidence.\nTwo variables are independent, then\n\\[ p(X, Y) = p(X)p(Y) \\]\nIf two variables are conditionally independent given a third event, then\n\\[ p(X, Y|Z) = P(X|Z)P(Y|Z) \\]\nProbability Distributions Events come from a space of possible outcomes.\n\\begin{equation*} \\Omega = {1, 2, 3, 4, 5, 6} \\end{equation*}\nA measureable event is one for which we can assign a probability.\nAn event space must satisfy the following:\nIt contains the empty event \\(\\emptyset\\) and trivial event \\(\\Omega\\) It is closed under union It is closed under complementation: if \\(\\alpha \\in S\\), so is \\(\\Omega - \\alpha\\) Statement 2 implies difference and intersection A probability distribution \\(P\\) over \\((\\Omega, S)\\) maps events \\(S\\) to real values and satisfies:\n\\(P(\\alpha) \\geq 0\\) for all \\(\\alpha \\in S\\) \\(P(\\Omega) = 1\\) If \\(\\alpha,\\beta \\in S\\) and \\(\\alpha \\cap \\beta = \\emptyset\\), then \\(P(\\alpha \\cup \\beta) = P(\\alpha)+P(\\beta)\\) \\(P(\\emptyset) = 0\\) \\(P(\\alpha \\cup \\beta) = P(\\alpha) + P(\\beta) - P(\\alpha \\cap \\beta)\\) Conditional Probability Defined as\n\\begin{equation*} P(\\beta | \\alpha) = \\frac{P(\\alpha \\cap \\beta)}{P(\\alpha)} \\end{equation*}\nThe more that \\(\\alpha\\) and \\(\\beta\\) relate, the higher the probability.\nThe Chain Rule of Probability \\begin{equation*} P(\\alpha \\cap \\beta) = P(\\alpha) P(\\beta | \\alpha) \\end{equation*}\nGenerally\u0026hellip;\n\\begin{equation*} P(\\alpha_1 \\cap \\dotsb \\cap \\alpha_k) = P(\\alpha_1)P(\\alpha_2 | \\alpha_1) \\dotsm P(\\alpha_k | \\alpha_1 \\cap \\dotsb \\cap \\alpha_{k-1}) \\end{equation*}\nBayes\u0026rsquo; Rule \\begin{equation*} P(\\alpha | \\beta) = \\frac{P(\\beta | \\alpha)P(\\alpha)}{P(\\beta)} \\end{equation*}\nComputes the inverse conditional probability.\nA general conditional version of Baye\u0026rsquo;s rule:\n\\begin{equation*} P(\\alpha | \\beta \\cap \\gamma) = \\frac{P(\\beta | \\alpha \\cap \\gamma)P(\\alpha | \\gamma)}{P(\\beta | \\gamma)} \\end{equation*}\nExample: TB Tests A common example for introduction Bayes\u0026rsquo; rule is that of the test that gives 95% accuracy. The naive assumption here is that if you receive a positive result with no prior information, then there is a 95% chance you have the infection. This is wrong because that value is conditioned on already being infected.\nRules of Probability Sum Rule: \\(p(X) = \\sum_{Y}p(X, Y)\\)\nProduct Rule: \\(p(X, Y) = p(Y|X)p(X)\\)\nRandom Variables Allows for compact notation when talking about an event. It can also be represented as a function:\n\\begin{equation*} f_{\\text{Grade}} \\end{equation*}\nmaps each person in \\(\\Omega\\) to a grade value.\nRandom variables are commonly either categorical or real numbers.\nThe multinoulli distribution is one over \\(k \u0026gt; 2\\) categorical random variables. If \\(k = 2\\), the distribution is called the Bernoulli or binomial distribution.\nThe marginal distribution is one over a single random variable \\(X\\).\nA joint distribution is one over a set of random variables.\nThe marginal can be computed from a joint distribution.\n\\begin{equation*} P(x) = \\sum_{y}P(x, y) \\end{equation*}\nContinuous Variables The introductory example looked at events that take on discrete values. That is, we either selected a cookie or did not. Most of the problems we will deal with in this course involve continuous values. In this case, we are concerned with intervals that the values may take on. If we consider a small differential of our random variable \\(x\\) as \\(\\delta x\\), we can compute the probability density \\(p(x)\\).\nFigure 1: PDF (p(x)) and CDF (P(x)). Source: Bishop With this differential \\(\\delta x\\), we can compute the probability that \\(x\\) lies on some interval \\((a, b)\\):\n\\begin{equation*} p(a \\leq x \\leq b) = \\int_{a}^{b} p(x) dx \\end{equation*}\nAs with discrete probability distributions, the probability density must sum to 1 and cannot take a negative value. That is\n\\begin{align*} p(x) \u0026amp;\\geq 0\\\\ \\int_{-\\infty}^{\\infty}p(x)dx \u0026amp;= 1 \\end{align*}\nIn the plot above, \\(p(x)\\) is the probability density function (pdf) and \\(P(x)\\) is the cumulative distribution function (cdf). It is possible for a pdf to have a value greater than 1, as long as integrals over any interval are less than or equal to 1.\nThe cumulative distribution function \\(P(x)\\) is the probability that \\(x\\) lies in the interval \\((-\\infty, z)\\), given by\n\\begin{equation*} P(z) = \\int_{\\infty}^{z} p(x)dx. \\end{equation*}\nNote that the derivative of the cdf is equal to the pdf.\nThe product rule for continuous probability distributions takes on the same form as that of discrete distributions. The sum rule is written in terms of integration:\n\\begin{equation*} p(x) = \\int p(x, y)dy. \\end{equation*}\nExpectation, Variance, and Covariance Three extremely important statistics for any probability distribution are the average, variance, and covariance.\nExpectation The average of a function \\(f(x)\\) under a probability distribution \\(p(x)\\) is referred to as the expectation of \\(f(x)\\), written as \\(\\mathbb{E}[f]\\). The expectation for discrete and continuous distributions are\n\\begin{align*} \\mathbb{E}[f] \u0026amp;= \\sum_x p(x)f(x) \\text{ and}\\\\ \\mathbb{E}[f] \u0026amp;= \\int p(x)f(x)dx, \\end{align*}\nrespectively.\nFigure 2: Expectation of rolling a d6 over ~1800 trials converges to 3.5. Source: Seeing Theory The mean value for a discrete and continuous probability distribution is define as\n\\begin{align*} \\mathbb{E}[f] \u0026amp;= \\sum_x p(x)x \\text{ and}\\\\ \\mathbb{E}[f] \u0026amp;= \\int_{-\\infty}^{\\infty} p(x)xdx, \\end{align*}\nrespectively.\nEmpirically, we can approximate this quantity given \\(N\\) samples as\n\\begin{equation*} \\mathbb{E}[f] \\approx \\frac{1}{N}\\sum_{i=1}^{N}f(x_i). \\end{equation*}\nVariance The variance of a function \\(f(x)\\) under a probability distribution \\(p(x)\\) measures how much variability is in \\(f(x)\\) around the expected value \\(\\mathbb{E}[f(x)]\\) and is defined by\n\\begin{align*} \\text{var}[f] \u0026amp;= \\mathbb{E}[(f(x) - \\mathbb{E}[f(x)])^2]\\\\ \u0026amp;= \\mathbb{E}[f(x)^2] - \\mathbb{E}[f(x)]^2. \\end{align*}\nFigure 3: Variance of drawing cars with values 1-10 100 trials converges to 8.79. True variance is 8.25. Source: Seeing Theory Covariance The covariance of two random variables \\(x\\) and \\(y\\) provides a measure of dependence between the two variables. This implies that the covariance between two independent variables is 0.\n\\begin{align*} \\text{cov}[\\mathbf{x},\\mathbf{y}] \u0026amp;= \\mathbf{E}_{\\mathbf{x},\\mathbf{y}}[\\{\\mathbf{x} - \\mathbb{E}[\\mathbf{x}]\\}\\{\\mathbf{y}^T - \\mathbb{E}[\\mathbf{y}^T]\\}]\\\\ \u0026amp;= \\mathbb{E}_{\\mathbf{x},\\mathbf{y}}[\\mathbf{x}\\mathbf{y}^T] - \\mathbb{E}[\\mathbf{x}]\\mathbb{E}[\\mathbf{y}^T]. \\end{align*}\nFigure 4: Plot of 2D data with negative covariance. Source: Wikipedia Figure 5: Plot of 2D data with approximately 0 covariance. Source: Wikipedia Figure 6: Plot of data with positive covariance. Source: Wikipedia ","date":1642831200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1642831200,"objectID":"03c02884d03e4e29be21f5ab9a6ade33","permalink":"https://ajdillhoff.github.io/notes/probability_theory/","publishdate":"2022-01-22T00:00:00-06:00","relpermalink":"/notes/probability_theory/","section":"notes","summary":"Table of Contents Introduction A Simple Example Probability Distributions Conditional Probability Rules of Probability Random Variables Continuous Variables Expectation, Variance, and Covariance Introduction Probability theory provides a consistent framework for the quantification and manipulation of uncertainty. It allows us to make the best decisions given the limited information we may have. Many tasks, models, and evaluation metrics that we will explore in this course are either based on, or are inspired by, probability theory.","tags":null,"title":"Probability Theory","type":"notes"},{"authors":["Alex Dillhoff"],"categories":null,"content":" Table of Contents Introduction Maximum Margin Classifier Formulation Overlapping Class Distributions Multiclass SVM Additional Resources Introduction Support Vector Machines are a class of supervised learning methods primarily used for classification. Although they can be formulated for regression and outlier detection as well. Instead of optimizing a set of parameters which compress or summarize the training set, they use a small subset of the training data to compute the decision function.\nThey rely on the data being linearly separable, so feature transformations are critical for problems in which the original representation of the data is not linearly separable.\nMaximum Margin Classifier Let\u0026rsquo;s start with a simple classification model as we studied with Logistic Regression. That is, we have\n\\[ f(\\mathbf{x}) = \\mathbf{w}^T\\phi(\\mathbf{x}), \\]\nwhere \\(\\phi(\\mathbf{x})\\) is a function which transforms our original input into some new feature space. The transformed input is assumed to be linearly separable so that a decision boundary can be computed. In the original logistic regression problem, a decision boundary was found through optimization. For linearly separable data, there are an infinite number of decision boundaries that satisfy the problem.\nWhat about the quality of the decision boundary?\nIs one decision boundary better than the other?\nTODO: Add a few plots comparing decision boundaries\nFormulation Given a training set \\(\\{\\mathbf{x}_1, \\dots, \\mathbf{x}_n\\}\\) with labels \\(\\{y_1, \\dots, y_n\\}\\), where \\(y_i \\in \\{-1, 1\\}\\), we construct a linear model which classifies an input sample depending on the sign of the output.\nOur decision rule for classification, given some input \\(\\mathbf{x}\\), is\n\\begin{equation*} f(\\mathbf{x}) = \\begin{cases} 1\\text{ if }\\mathbf{w}^T\\mathbf{x} + b \\geq 0\\\\ -1\\text{ if }\\mathbf{w}^T\\mathbf{x} + b \u0026lt; 0 \\end{cases} \\end{equation*}\nHow large should the margin be?\nIn the original formulation of Logistic Regression, we saw that the parameter vector \\(\\mathbf{w}\\) described the normal to the decision boundary. The distance between a given point \\(\\mathbf{x}\\) and the decision boundary is given by\n\\[ \\frac{y_if(\\mathbf{x})}{||\\mathbf{w}||}. \\]\nWe can frame this as an optimization problem: come up with a value for \\(\\mathbf{w}\\) that maximizes the margin.\n\\[ \\text{arg max}_{\\mathbf{w}, b} \\frac{1}{\\|\\mathbf{w}\\|}\\min_{i} y_i (\\mathbf{w}^T\\phi(\\mathbf{x}_i) + b) \\]\nWe can arbitrarily scale the parameters, so we add an additional constraint that any point that lies on the boundary of the margin satisfies\n\\[ y_i(\\mathbf{w}^T\\mathbf{x} + b) = 1. \\]\nUnder this constraint, we have that all samples satisfy\n\\[ y_i(\\mathbf{w}^T\\mathbf{x} + b) \\geq 1. \\]\nThat is, all positive samples with target \\(1\\) will produce at least a \\(1\\), yielding a value greater than or equal to 1. All negative samples with target \\(-1\\) will produce at most a \\(-1\\), yielding a value greater than or equal to 1.\nAnother way of writing this is\n\\begin{equation*} f(\\mathbf{x}) = \\begin{cases} 1\\text{ if }\\mathbf{w}^T\\mathbf{x}_{+} + b \\geq 1\\\\ -1\\text{ if }\\mathbf{w}^T\\mathbf{x}_{-} + b \\leq -1, \\end{cases} \\end{equation*}\nwhere \\(\\mathbf{x}_+\\) is a positive sample and \\(\\mathbf{x}_-\\) is a negative sample. The decision rule can then be written as\n\\[ y_i(\\mathbf{w}^T\\mathbf{x} + b) - 1 \\geq 0. \\]\nThis implies that the only samples that would yield an output of 0 are those that lie directly on the margins of the decision boundary.\nGiven this constraint of \\(y_i(\\mathbf{w}^T\\mathbf{x} + b) - 1 = 0\\), we can derive our optimization objective.\nThe margin can be computed via the training data. To do this, consider two data points which lie on their respective boundaries, one positive and one negative, and compute the distance between them: \\(\\mathbf{x}_+ - \\mathbf{x}_-\\). This distance with respect to our decision boundary, defined by \\(\\mathbf{w}\\), is given by\n\\[ (\\mathbf{x}_+ - \\mathbf{x}_-) \\cdot \\frac{\\mathbf{w}}{||\\mathbf{w}||}. \\]\nFor clarity, we can rewrite this as\n\\begin{equation*} \\frac{1}{||\\mathbf{w}||}(\\mathbf{x}_{+} \\cdot \\mathbf{w} - \\mathbf{x}_{-} \\cdot \\mathbf{w}). \\end{equation*}\nIf we substitute the sample values into the equality constraint above, we can simplify this form. For the positive sample, we have \\(\\mathbf{w}^T\\mathbf{x} = 1 - b\\). For the negative sample, we get \\(\\mathbf{w}^T\\mathbf{x} = -1 - b\\). The equation above then becomes\n\\begin{equation*} \\frac{1}{||\\mathbf{w}||}(1 - b - (-1 - b)) = \\frac{2}{||\\mathbf{w}||}. \\end{equation*}\nThus, our objective is to maximize \\(\\frac{2}{||\\mathbf{w}||}\\) which is equivalent to minimizing \\(\\frac{1}{2}||\\mathbf{w}||^2\\) subject to the constraints \\(y_i(\\mathbf{w}^T\\mathbf{x}+b)\\geq 1\\). This is a constrainted optimization problem. As discussed previously, we can simplify such problems by introducing Lagrangian Multipliers. Doing this produces the dual representation of our optimization objection:\n\\begin{equation*} L = \\frac{1}{2}||\\mathbf{w}||^2 - \\sum_{i=1}^n \\alpha_i \\big(y_i(\\mathbf{w}^T\\mathbf{x}_i + b) - 1\\big). \\end{equation*}\nTo solve for \\(\\mathbf{w}\\) we compute \\(\\frac{\\partial}{\\partial \\mathbf{w}}L\\).\n\\begin{equation*} \\frac{\\partial}{\\partial \\mathbf{w}}L = \\mathbf{w} - \\sum_{i=1}^n \\alpha_i y_i \\mathbf{x}_i. \\end{equation*}\nSetting this to 0 yields\n\\begin{equation*} \\mathbf{w} = \\sum_{i=1}^n \\alpha_i y_i \\mathbf{x}_i. \\end{equation*}\nDoing the same for the other parameter \\(b\\) yields\n\\[ 0 = \\sum_{i=1}^n \\alpha_i y_i. \\]\nWe can now simplify our objective function by substituting these results into it:\n\\begin{align*} L \u0026amp;= \\frac{1}{2}\\Big(\\sum_{i=1}^n \\alpha_i y_i \\mathbf{x}_i\\Big)^2 - \\sum_{i=1}^n \\alpha_i\\Big(y_i\\big((\\sum_{i=1}^n\\alpha_i y_i \\mathbf{x}_i)^T\\mathbf{x}_i + b \\big) - 1 \\Big)\\\\ \u0026amp;= \\frac{1}{2}\\Big(\\sum_{i=1}^n \\alpha_i y_i \\mathbf{x}_i\\Big)^2 - \\Big(\\sum_{i=1}^n \\alpha_i y_i \\mathbf{x}_i \\Big)^2 - \\sum_{i=1}^n \\alpha_i y_i b + \\sum_{i=1}^n \\alpha_i\\\\ \u0026amp;= -\\frac{1}{2} \\Big(\\sum_{i=1}^n \\alpha_i y_i \\mathbf{x}_i \\Big)^2 + \\sum_{i=1}^n \\alpha_i\\\\ \u0026amp;= \\sum_{i=1}^n \\alpha_i - \\frac{1}{2}\\sum_{i=1}^n\\sum_{j=1}^m \\alpha_i \\alpha_j y_i y_j \\mathbf{x}_i \\cdot \\mathbf{x}_j \\end{align*}\nThus, the objective is dependent on the inner product of samples \\(\\mathbf{x}_i\\) and \\(\\mathbf{x}_j\\). If these were representations in some complex feature space, our problem would remain computationally inefficient. However, we can take advantage of Kernels for this.\nNote that, in most cases, \\(\\alpha_i\\) will be 0 since we only consider support vectors. That is, the points that lie on the margins of the decision boundary.\nOverlapping Class Distributions The above formulation is fine and works with datasets that have no overlap in feature space. That is, they are completely linearly separable. However, it is not always the case that they will be.\nTo account for misclassifications while still maximizing a the margin between datasets, we introduce a penalty value for points that are misclassified. As long as there aren\u0026rsquo;t too many misclassifications, this penalty will stay relatively low while still allowing us to come up with an optimal solution.\nThis penalty comes in the form of a slack variable \\(\\xi_i \\geq 0\\) for each sample that is \\(0\\) for points that are on or inside the correct margin and \\(\\xi_i = |y_i - f(\\mathbf{x})|\\) for others. If the point is misclassified, its slack variable will be \\(\\xi_i \u0026gt; 1\\).\nMulticlass SVM Similar to our simple Logistic Regression method, SVMs are binary classifiers by default. We can take a similar approach to extending them to multiple classes, but there are downsides to each approach.\nThe \u0026ldquo;one-vs-all\u0026rdquo; approach entails building \\(|K|\\) classifiers and choose the classifier which predicts the input with the greatest margin.\nThe \u0026ldquo;one-vs-one\u0026rdquo; approach involves building \\(|K|\\cdot\\frac{|K| - 1}{2}\\) classifiers. In this case, training each classifer will be more tractable since the amount of data required for each one is less. For example, you would have a model for class 1 vs 2, class 1 vs 3, \u0026hellip;, class 1 vs \\(K\\). Then repeat for class 2: 2 vs 3, 2 vs 4, \u0026hellip;, 2 vs \\(|K|\\), and so on.\nA third approach is to construct several models using a feature vector dependent on both the data and class label. When given a new input, the model computes\n\\[ y = \\text{arg}\\max_{y\u0026rsquo;}\\mathbf{w}^T\\phi(\\mathbf{x},y\u0026rsquo;). \\]\nThe margin for this classifier is the distance between the correct class and the closest data point of any other class.\nAdditional Resources https://web.mit.edu/6.034/wwwbob/svm.pdf https://see.stanford.edu/materials/aimlcs229/cs229-notes3.pdf ","date":1642831200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1642831200,"objectID":"0072e15bf08a567be6de4867b7b022a6","permalink":"https://ajdillhoff.github.io/notes/support_vector_machine/","publishdate":"2022-01-22T00:00:00-06:00","relpermalink":"/notes/support_vector_machine/","section":"notes","summary":"Table of Contents Introduction Maximum Margin Classifier Formulation Overlapping Class Distributions Multiclass SVM Additional Resources Introduction Support Vector Machines are a class of supervised learning methods primarily used for classification. Although they can be formulated for regression and outlier detection as well. Instead of optimizing a set of parameters which compress or summarize the training set, they use a small subset of the training data to compute the decision function.","tags":["machine learning"],"title":"Support Vector Machine","type":"notes"},{"authors":["Alex Dillhoff"],"categories":null,"content":" Table of Contents Introduction Probabilistic Interpretation Solving with Normal Equations Another Approach to Normal Equations Fitting Polynomials Linear Basis Functions Introduction Given a dataset of observations \\(\\mathbf{X} \\in \\mathbb{R}^{n \\times d}\\), where \\(n\\) is the number of samples and \\(d\\) represents the number of features per sample, and corresponding target values \\(\\mathbf{Y} \\in \\mathbb{R}^n\\), create a simple prediction model which predicts the target value \\(\\mathbf{y}\\) given a new observation \\(\\mathbf{x}\\). The classic example in this case is a linear model, a function that is a linear combination of the input features and some weights \\(\\mathbf{w}\\).\nFigure 1: Plot of univariate data where the (x) values are features and (y) are observations. The generated data is plotted above along with the underlying true function that was used to generate it. If we already know what the true function is, our job is done. Suppose that we only have the data points (in blue). How do we go about modelling it? It is reasonable to first visualize the data and observe that it does follow a linear pattern. Thus, a linear model would be a decent model to choose.\nIf the data followed a curve, we may decide to fit a polynomial. We will look at an example of that later on. For now, let\u0026rsquo;s formalize all of the information that we have.\n\\((\\mathbf{x}, \\mathbf{y})\\) - Data points from the original dataset. Generally, \\(\\mathbf{x}\\) is a vector of features and \\(\\mathbf{y}\\) is the target vector. In our simple dataset above, these are both scalar values. \\(\\mathbf{w} = (w_0, w_1)\\) - Our model parameters. Comparing to the equation \\(y = mx + b\\), \\(w_0\\) is our bias term and \\(w_1\\) is our slope parameter. Making Predictions Given \\(\\mathbf{w}\\), we can make a prediction for a new data sample \\(\\mathbf{x} = x_1\\).\n\\[ h(\\mathbf{x}; \\mathbf{w}) = w_0 + w_1 x_1 \\]\nNote that the bias term is always added to the result. We can simplify this into a more general form by appending a constant 1 (s.t. \\(x_0 = 1\\)) to each of our samples such that \\(\\mathbf{x} = (1, x_1, \u0026hellip;, x_d)\\). Then, the general linear model becomes\n\\[ h(\\mathbf{x}; \\mathbf{w}) = \\sum_{i=0}^{d} w_i x_i = \\mathbf{w}^T \\mathbf{x}. \\]\nIf our data happened to have more than 1 feature, it would be easy enough to model it appropriately using this notation.\nDetermining Fitness If we really wanted to, we could fit our model by plotting it and manually adjusting the weights until our model looked acceptable by some qualitative standard. Fortunately we won\u0026rsquo;t be doing that. Instead, we will use a quantitative measurement that provides a metric of how well our current parameters fit the data.\nFor this, we use a cost function or loss function. The most common one to use for this type of model is the least-squares function:\n\\[ J(\\mathbf{w}) = \\frac{1}{2}\\sum_{i=1}^{n}(h(\\mathbf{x}_{i};\\mathbf{w}) - \\mathbf{y}_{i})^2. \\]\nStochastic Gradient Descent Depending on the random initialization of parameters, our error varies greatly. We can observe that no matter what the chose parameters are, there is no possible way we can achieve an error of 0. The best we can do is minimize this error:\n\\[ \\min_{\\mathbf{w}} J(\\mathbf{w}). \\]\nFor this, we rely on stochastic gradient descent. The basic idea is as follows:\nBegin with an initial guess for \\(\\mathbf{w}\\). Compare the prediction for sample \\(\\mathbf{x}^{(i)}\\) with its target \\(\\mathbf{y}^{(i)}\\). Update \\(\\mathbf{w}\\) based on the comparison in part 2. Repeat steps 2 and 3 on the dataset until the loss has converged. Steps 1, 3, and 4 are easy enough. What about step 2? How can we possibly know how to modify \\(\\mathbf{w}\\) such that \\(J(\\mathbf{w})\\) will decrease? By computing the gradient \\(\\frac{d}{d\\mathbf{w}}J(\\mathbf{w})\\)! How will we know when we have arrived at a minima? When \\(\\nabla J(\\mathbf{w}) = 0\\).\n\\begin{align*} \\frac{d}{d\\mathbf{w}}J(\\mathbf{w}) \u0026amp;= \\frac{d}{d\\mathbf{w}}\\frac{1}{2}(h(\\mathbf{x}_{i};\\mathbf{w}) - \\mathbf{y}_{i})^2\\\\ \u0026amp;= 2 \\cdot \\frac{1}{2}(h(\\mathbf{x}_{i};\\mathbf{w}) - \\mathbf{y}_{i}) \\cdot \\frac{d}{d\\mathbf{w}} (h(\\mathbf{x}_{i};\\mathbf{w}) - \\mathbf{y}_{i})\\\\ \u0026amp;= (h(\\mathbf{x}_{i};\\mathbf{w}) - \\mathbf{y}_{i}) \\cdot \\frac{d}{d\\mathbf{w}} (\\mathbf{w}^T \\mathbf{x}_{i} - \\mathbf{y}_{i})\\\\ \u0026amp;= (h(\\mathbf{x}_{i};\\mathbf{w}) - \\mathbf{y}_{i}) \\mathbf{x}_{i} \\end{align*}\nThe gradient represents the direction of greatest change for a function evaluated With this gradient, we can use an update rule to modify the previous parameter vector \\(\\mathbf{w}\\):\n\\[ \\mathbf{w}_{t+1} = \\mathbf{w}_{t} - \\alpha \\sum_{i=1}^{n} (h(\\mathbf{x}_{i};\\mathbf{w}_{t}) - \\mathbf{y}_{i}) \\mathbf{x}_{i}. \\]\nHere, \\(\\alpha\\) is an update hyperparameter that allows us to control how big or small of a step our weights can take with each update. In general, a smaller value will be more likely to get stuck in local minima. However, too large of a value may never converge to any minima.\nAnother convenience of this approach is that it is possible to update the weights based on a single sample, batch of samples, or the entire dataset. This sequential process makes optimization using very large dataset feasible.\nProbabilistic Interpretation \u0026ldquo;Probability theory is nothing but common sense reduced to calculation.\u0026rdquo; - Pierre-Simon Laplace\nRecall Bayes\u0026rsquo; theorem:\n\\[ p(\\mathbf{w}|\\mathbf{X}) = \\frac{p(\\mathbf{X}|\\mathbf{w})p(\\mathbf{w})}{p(\\mathbf{X})}. \\]\nThat is, the posterior probability of the weights conditioned on the observered data \\(\\mathbf{X}\\) is equal to the likelihood of the observed data given the times the prior distribution. This base notation doesn\u0026rsquo;t line up well with our problem. For our problem, we have observations \\(\\mathbf{Y}\\) which are dependent on the input features \\(\\mathbf{X}\\):\n\\[ p(\\mathbf{w}|\\mathbf{X}, \\mathbf{Y}) = \\frac{p(\\mathbf{Y}|\\mathbf{X}, \\mathbf{w}) p(\\mathbf{w}|\\mathbf{X})}{p(\\mathbf{Y}|\\mathbf{X})}, \\]\nwhere \\(\\mathbf{X} \\in \\mathbb{R}^{n \\times d}\\) and \\(\\mathbf{Y} \\in \\mathbb{R}^n\\).\nThe choice of least squares also has statistical motivations. As discussed previously, we are making a reasonable assumption that there is some relationship between the features of the data and the observed output. This is typically modeled assume\n\\[ \\hat{\\mathbf{Y}} = f(\\mathbf{X}) + \\epsilon. \\]\nHere, \\(\\epsilon\\) is a random error term that is independent of \\(\\mathbf{X}\\) and has 0 mean. This term represents any random noise that occurs either naturally or from sampling. It also includes any effects that are not properly captured by \\(f\\). Rearranging the terms of this equation to solve for \\(\\epsilon\\) allows us to define the discrepencies in the model:\n\\[ \\mathbf{\\epsilon}_i = h(\\mathbf{x}_{i}; \\mathbf{w}) - \\mathbf{y}_{i}. \\]\nIf we assume that these discrepancies are independent and identically distributed with variance \\(\\sigma^2\\) and Gaussian PDF \\(f\\), the likelihood of observations \\(\\mathbf{y}^{(i)}\\) given parameters \\(\\mathbf{w}\\) is\n\\[ p(\\mathbf{Y}|\\mathbf{X}, \\mathbf{w}, \\sigma) = \\prod_{i=1}^{n} f(\\epsilon_i; \\sigma), \\]\nwhere\n\\[ f(\\epsilon_i; \\sigma) = \\frac{1}{\\sqrt{2\\pi\\sigma^2}}\\exp\\Big(-\\frac{\\epsilon^2}{2\\sigma^2}\\Big). \\]\nThis new parameter changes our original distribution function to\n\\[ p(\\mathbf{w}|\\mathbf{X}, \\mathbf{Y}, \\sigma) = \\frac{p(\\mathbf{Y}|\\mathbf{X}, \\mathbf{w}, \\sigma) p(\\mathbf{w}|\\mathbf{X}, \\sigma)}{p(\\mathbf{Y}|\\mathbf{X}, \\sigma)}. \\]\nTwo things to note before moving on. First, the prior \\(p(\\mathbf{Y}|\\mathbf{X}, \\sigma)\\) is a normalizing constant to ensure that the posterior is a valid probability distribution. Second, if we assume that all value for \\(\\mathbf{w}\\) are equally likely, then \\(p(\\mathbf{w}|\\mathbf{x}, \\sigma)\\) also becomes constant. This is a convenient assumption which implies that maximizing the posterior is equivalent to maximizing the likelihood function.\nWith that out of the way, we can focus solely on the likelihood function. Expanding out the gaussian PDF \\(f\\) yields\n\\[ p(\\mathbf{Y}|\\mathbf{X}, \\mathbf{w}, \\sigma) = -\\frac{n}{\\sqrt{2\\pi\\sigma^2}}\\exp\\Big(-\\frac{1}{2\\sigma^2}\\sum_{i=1}^{n}(h(\\mathbf{x}_{i};\\mathbf{w}) - \\mathbf{y}_{i})^2\\Big). \\]\nWe can see that maximizing \\(p(\\mathbf{Y}|\\mathbf{X}, \\mathbf{w}, \\sigma)\\) is the same as minimizing the sum of squares. In practice, we use the negative log of the likelihood function since the negative logarithm is monotonically decreasing.\nSolving with Normal Equations You may have studied the normal equations when you took Linear Algebra. The normal equations are motivated by finding approximate solutions to \\(A\\mathbf{x} = \\mathbf{b}\\). Most of the earlier part of linear algebra courses focus on finding exact solutions by solving systems of equations using Gaussian elimination (row reduction). Approximate solutions can be found by projecting the observed data points \\(\\mathbf{b}\\) onto the column space of \\(A\\) and solving \\(A \\mathbf{x} = \\hat{\\mathbf{b}}\\), where \\(\\hat{\\mathbf{b}} = \\text{proj}_{\\text{Col} A}\\mathbf{b}\\). Then, \\(\\mathbf{b} - \\hat{\\mathbf{b}}\\) represents a vector orthogonal to \\(\\text{Col}A\\).\nSince each column vector of \\(A\\) is orthogonal to \\(\\mathbf{b} - \\hat{\\mathbf{b}}\\), the dot product between them should be 0. Rewriting this, we get\n\\begin{aligned} A^T(\\mathbf{b} - A\\mathbf{x}) \u0026amp;= \\mathbf{0}\\\\ A^T \\mathbf{b} - A^T A \\mathbf{x} \u0026amp;= \\mathbf{0}. \\end{aligned}\nThis means that each least-squares solution of \\(A\\mathbf{x} = \\mathbf{b}\\) satisfies\n\\[ A^T A \\mathbf{x} = A^T \\mathbf{b}. \\]\nExample Let\u0026rsquo;s take our univariate problem of \\((\\mathbf{x}, \\mathbf{y})\\) pairs. To use the normal equations to solve the least squares problem, we first change the notation just a bit as not confuse our data points and our parameters:\n\\[ \\mathbf{X}^T \\mathbf{X} \\beta = \\mathbf{X}^T \\mathbf{y} \\]\nCreate the design matrix \\(\\mathbf{X}\\) where each row represents the the \\(\\mathbf{x}\\) values. Recall that even though we only have 1 feature for \\(\\mathbf{x}\\), we append the bias constant as \\(x_0 = 1\\) to account for the bias parameter. \\(\\mathbf{X}\\) is then\n\\begin{equation*} \\mathbf{X} = \\begin{bmatrix} x_0^{(0)} \u0026amp; x_1^{(0)}\\\\ x_0^{(1)} \u0026amp; x_1^{(1)}\\\\ \\vdots \u0026amp; \\vdots \\\\ x_0^{(n)} \u0026amp; x_1^{(n)} \\end{bmatrix}. \\end{equation*}\nThe parameter vector is\n\\begin{equation*} \\beta = \\begin{bmatrix} \\beta_0\\\\ \\beta_1 \\end{bmatrix}. \\end{equation*}\nThe observed values are packed into \\(\\mathbf{y}\\). We can then solve for \\(\\beta\\) using any standard solver:\n\\[ \\beta = (\\mathbf{X}^T \\mathbf{X})^{-1}X^T \\mathbf{y}. \\]\nRank-Deficient matrices In the event that the matrix \\(\\mathbf{X}^T \\mathbf{X}\\) is singular, then its inverse cannot be computed. This implies that one or more of the features is a linear combination of the others.\nThis can be detected by checking the rank of \\(\\mathbf{X}^T \\mathbf{X}\\) before attempting to compute the inverse. You can also determine which features are redundant via Gaussian elimination. The columns in the reduced matrix that do not have a pivot entry are redundant.\nAnother Approach to Normal Equations We can arrive at the normal equations by starting at the probabilistic perspective. Recall the likelihood function\n\\[ p(\\mathbf{Y}|\\mathbf{X}, \\mathbf{w}, \\sigma) = -\\frac{n}{\\sqrt{2\\pi\\sigma^2}}\\exp\\Big(-\\frac{1}{2\\sigma^2}\\sum_{i=1}^{n}(h(\\mathbf{x}_{i};\\mathbf{w}) - \\mathbf{y}_{i})^2\\Big). \\]\nTaking the natural log of this function yields\n\\[ \\ln p(\\mathbf{Y}|\\mathbf{X}, \\mathbf{w}, \\sigma) = - \\frac{1}{2\\sigma^2}\\sum_{i=1}^{n}(h(\\mathbf{x}_{i}; \\mathbf{w}) - \\mathbf{y}_{i})^2 - \\frac{n}{2}\\ln(\\sigma^2) - \\frac{n}{2}\\ln(2\\pi). \\]\nAs mentioned before, maximizing the likelihood function is equivalent to minimizing the sum-of-squares function. Thus, we must find the critical point of the likelihood function by computing the gradient (w.r.t. \\(\\mathbf{w}\\)) and solving for 0:\n\\begin{align*} \\nabla \\ln p(\\mathbf{Y}|\\mathbf{X}, \\mathbf{w}, \\sigma) \u0026amp;= \\sum_{i=1}^{n}(\\mathbf{w}^T\\mathbf{x}_{i} - \\mathbf{y}_{i})\\mathbf{x}_{i}^{T}\\\\ \u0026amp;= \\mathbf{w}^T \\sum_{i=1}^{n}\\mathbf{x}_i\\mathbf{x}_i^T - \\sum_{i=1}^{n}\\mathbf{y}_{i}\\mathbf{x}_{i}^{T}\\\\ \\end{align*}\nNoting that \\(\\sum_{i=1}^{n}\\mathbf{x}_i \\mathbf{x}_i^T\\) is simply matrix multiplication, we can use\n\\begin{equation*} \\mathbf{X} = \\begin{bmatrix} \\mathbf{x}_1^T\\\\ \\vdots\\\\ \\mathbf{x}_n^T\\\\ \\end{bmatrix}. \\end{equation*}\nThen, \\(\\sum_{i=1}^{n}\\mathbf{x}_i \\mathbf{x}_i^T = \\mathbf{X}^T \\mathbf{X}\\), \\(\\sum_{i=1}^{n}\\mathbf{y}_i \\mathbf{x}_i^T = \\mathbf{Y}^T \\mathbf{X}\\), and\n\\[ \\nabla \\ln p(\\mathbf{Y}|\\mathbf{X}, \\mathbf{w}, \\sigma) = \\mathbf{w}^T \\mathbf{X}^T \\mathbf{X} - \\mathbf{Y}^T \\mathbf{X}. \\]\nSince we are finding the maximum likelihood, we set \\(\\nabla \\ln p(\\mathbf{Y}|\\mathbf{X}, \\mathbf{w}, \\sigma) = 0\\) and solve for \\(\\mathbf{w}\\):\n\\[ \\mathbf{w} = (\\mathbf{X}^T \\mathbf{X})^{-1} \\mathbf{X}^T \\mathbf{Y}. \\]\nThus, we arrive again at the normal equations and can solve this using a linear solver.\nFitting Polynomials Not every dataset can be modeled using a simple line. Data can be exponential or logarithmic in nature. We may also look to use splines to model more complex data.\nFigure 2: Data generated from a nonlinear function with added noise. The dataset above was generated from the function as seen in red. Using a simple linear model (blue) does not fit the data well. For cases such as this, we can fit a polynomial to the data by changing our input data.\nThe simple dataset above has 100 paired samples \\((x_i, y_i)\\). There is only a single feature \\(x_i\\) for each sample. It is trivial to determine that the shape of the data follows a cubic function. One solution would be to raise each input to the power of 3. This results in the function (blue) below.\nFigure 3: Solution from raising each input to the power of 3. To fit this data, we need to add more features to our input. Along with the original \\(x_i\\) features, we will also add \\(x_i^2\\) and \\(x_i^3\\). Our data is then 3 dimensional. The figure below shows the least squares fit using the modified data (blue).\nFigure 4: Least squares fit using a polynomial model (blue). A demo of this can be found here.\nLinear Basis Functions Linear models are linear in their inputs. This formulation is simple, producing models with limited representation. Linear models can be extended as a linear combination of fixed nonlinear functions of the original features. In the previous section, was saw that they could easily be extended to fit polynomial functions.\nWe now consider creating a model that transforms the original input using one or more nonlinear functions. This type of model is called a linear basis function model.\n\\[ h(\\mathbf{x};\\mathbf{w}) = \\sum_{j=1}^{m} w_j\\phi_j(\\mathbf{x}) \\]\nCommon basis functions are the sigmoid, Gaussian, or exponential function. If we choose the \\(\\sin\\) function as a basis function, we can more closely fit our dataset using the least squares approach.\nFigure 5: A linear basis function model using the sin function as the choice of basis. ","date":1641967200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1641967200,"objectID":"267d7f34a9ee73d8fc77237de6f23b2a","permalink":"https://ajdillhoff.github.io/notes/linear_regression/","publishdate":"2022-01-12T00:00:00-06:00","relpermalink":"/notes/linear_regression/","section":"notes","summary":"Table of Contents Introduction Probabilistic Interpretation Solving with Normal Equations Another Approach to Normal Equations Fitting Polynomials Linear Basis Functions Introduction Given a dataset of observations \\(\\mathbf{X} \\in \\mathbb{R}^{n \\times d}\\), where \\(n\\) is the number of samples and \\(d\\) represents the number of features per sample, and corresponding target values \\(\\mathbf{Y} \\in \\mathbb{R}^n\\), create a simple prediction model which predicts the target value \\(\\mathbf{y}\\) given a new observation \\(\\mathbf{x}\\).","tags":null,"title":"Linear Regression","type":"notes"},{"authors":[],"categories":[],"content":"Welcome to Slides academia\nFeatures Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides Controls Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;) Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne **Two** Three A fragment can accept two optional parameters:\nclass: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\nOnly the speaker can read these notes Press S key to view Themes black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/img/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}} Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; } Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://ajdillhoff.github.io/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using academia's Slides feature.","tags":[],"title":"Slides","type":"slides"}]